{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f7d29eb5",
   "metadata": {
    "papermill": {
     "duration": 0.018603,
     "end_time": "2023-08-12T15:39:35.022710",
     "exception": false,
     "start_time": "2023-08-12T15:39:35.004107",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "*Workthrough adapted from https://www.youtube.com/watch?v=I3FBJdiExcg&ab_channel=KenJee*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b37c34c0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:35.061554Z",
     "iopub.status.busy": "2023-08-12T15:39:35.060668Z",
     "iopub.status.idle": "2023-08-12T15:39:36.561724Z",
     "shell.execute_reply": "2023-08-12T15:39:36.560522Z"
    },
    "papermill": {
     "duration": 1.52338,
     "end_time": "2023-08-12T15:39:36.564254",
     "exception": false,
     "start_time": "2023-08-12T15:39:35.040874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4962756a",
   "metadata": {
    "papermill": {
     "duration": 0.018045,
     "end_time": "2023-08-12T15:39:36.600927",
     "exception": false,
     "start_time": "2023-08-12T15:39:36.582882",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Overview\n",
    "#### 1.) Read in the training and testing data\n",
    "#### 2.) Do some light exploratory data analysis\n",
    "#### 3.) Data featurization\n",
    "#### 4.) Fit the data with multiple models (logistic regression, XGBoost, SVM, KNN, Random Forest, Decision Tree, Voting CLassifier\n",
    "#### 5.) Perform Grid search then cross-validate\n",
    "#### 6.) Submit!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86ae31bd",
   "metadata": {
    "papermill": {
     "duration": 0.017972,
     "end_time": "2023-08-12T15:39:36.637218",
     "exception": false,
     "start_time": "2023-08-12T15:39:36.619246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1.) Read in training and testing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8821eb7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:36.675765Z",
     "iopub.status.busy": "2023-08-12T15:39:36.675352Z",
     "iopub.status.idle": "2023-08-12T15:39:36.729958Z",
     "shell.execute_reply": "2023-08-12T15:39:36.728809Z"
    },
    "papermill": {
     "duration": 0.077093,
     "end_time": "2023-08-12T15:39:36.732697",
     "exception": false,
     "start_time": "2023-08-12T15:39:36.655604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df = pd.read_csv('/kaggle/input/titanic/train.csv')\n",
    "test_df = pd.read_csv('/kaggle/input/titanic/test.csv')\n",
    "\n",
    "train_df['train_test'] = 1\n",
    "test_df['train_test'] = 0\n",
    "test_df['Survived'] = np.NaN\n",
    "all_data = pd.concat([train_df, test_df])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e14f5d7c",
   "metadata": {
    "papermill": {
     "duration": 0.01818,
     "end_time": "2023-08-12T15:39:36.769562",
     "exception": false,
     "start_time": "2023-08-12T15:39:36.751382",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2.) Basic EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6f6d221b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:36.808515Z",
     "iopub.status.busy": "2023-08-12T15:39:36.807271Z",
     "iopub.status.idle": "2023-08-12T15:39:36.830283Z",
     "shell.execute_reply": "2023-08-12T15:39:36.829406Z"
    },
    "papermill": {
     "duration": 0.04469,
     "end_time": "2023-08-12T15:39:36.832483",
     "exception": false,
     "start_time": "2023-08-12T15:39:36.787793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>train_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  train_test  \n",
       "0      0         A/5 21171   7.2500   NaN        S           1  \n",
       "1      0          PC 17599  71.2833   C85        C           1  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S           1  \n",
       "3      0            113803  53.1000  C123        S           1  \n",
       "4      0            373450   8.0500   NaN        S           1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "90000adf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:36.872381Z",
     "iopub.status.busy": "2023-08-12T15:39:36.871787Z",
     "iopub.status.idle": "2023-08-12T15:39:36.877612Z",
     "shell.execute_reply": "2023-08-12T15:39:36.876733Z"
    },
    "papermill": {
     "duration": 0.028094,
     "end_time": "2023-08-12T15:39:36.879701",
     "exception": false,
     "start_time": "2023-08-12T15:39:36.851607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
       "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'train_test'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7122c803",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:36.919015Z",
     "iopub.status.busy": "2023-08-12T15:39:36.918382Z",
     "iopub.status.idle": "2023-08-12T15:39:36.940636Z",
     "shell.execute_reply": "2023-08-12T15:39:36.939503Z"
    },
    "papermill": {
     "duration": 0.04503,
     "end_time": "2023-08-12T15:39:36.943345",
     "exception": false,
     "start_time": "2023-08-12T15:39:36.898315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 13 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      " 12  train_test   891 non-null    int64  \n",
      "dtypes: float64(2), int64(6), object(5)\n",
      "memory usage: 90.6+ KB\n"
     ]
    }
   ],
   "source": [
    "train_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "92c4cbef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:36.983246Z",
     "iopub.status.busy": "2023-08-12T15:39:36.982853Z",
     "iopub.status.idle": "2023-08-12T15:39:37.022649Z",
     "shell.execute_reply": "2023-08-12T15:39:37.021327Z"
    },
    "papermill": {
     "duration": 0.062697,
     "end_time": "2023-08-12T15:39:37.025264",
     "exception": false,
     "start_time": "2023-08-12T15:39:36.962567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>train_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  train_test  \n",
       "count  891.000000  891.000000       891.0  \n",
       "mean     0.381594   32.204208         1.0  \n",
       "std      0.806057   49.693429         0.0  \n",
       "min      0.000000    0.000000         1.0  \n",
       "25%      0.000000    7.910400         1.0  \n",
       "50%      0.000000   14.454200         1.0  \n",
       "75%      0.000000   31.000000         1.0  \n",
       "max      6.000000  512.329200         1.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e8366716",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:37.066183Z",
     "iopub.status.busy": "2023-08-12T15:39:37.065030Z",
     "iopub.status.idle": "2023-08-12T15:39:37.075960Z",
     "shell.execute_reply": "2023-08-12T15:39:37.075134Z"
    },
    "papermill": {
     "duration": 0.033618,
     "end_time": "2023-08-12T15:39:37.078085",
     "exception": false,
     "start_time": "2023-08-12T15:39:37.044467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "train_test       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# How many NaN values are there and where are they?\n",
    "train_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9744d534",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:37.118829Z",
     "iopub.status.busy": "2023-08-12T15:39:37.118167Z",
     "iopub.status.idle": "2023-08-12T15:39:37.125636Z",
     "shell.execute_reply": "2023-08-12T15:39:37.124473Z"
    },
    "papermill": {
     "duration": 0.030845,
     "end_time": "2023-08-12T15:39:37.128158",
     "exception": false,
     "start_time": "2023-08-12T15:39:37.097313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Break up training data into categorical and numerical data\n",
    "train_num = train_df[['Age', 'SibSp','Parch','Fare']]\n",
    "train_cat = train_df[['Survived','Pclass','Sex','Ticket','Cabin','Embarked']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b0588ec2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:37.169763Z",
     "iopub.status.busy": "2023-08-12T15:39:37.168976Z",
     "iopub.status.idle": "2023-08-12T15:39:38.642417Z",
     "shell.execute_reply": "2023-08-12T15:39:38.641373Z"
    },
    "papermill": {
     "duration": 1.497048,
     "end_time": "2023-08-12T15:39:38.645009",
     "exception": false,
     "start_time": "2023-08-12T15:39:37.147961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display distributions for all numerical data\n",
    "for i in train_num.columns:\n",
    "    plt.hist(train_num[i], bins=50)\n",
    "    plt.title(i)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f61b1e25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:38.688442Z",
     "iopub.status.busy": "2023-08-12T15:39:38.688058Z",
     "iopub.status.idle": "2023-08-12T15:39:39.078293Z",
     "shell.execute_reply": "2023-08-12T15:39:39.077101Z"
    },
    "papermill": {
     "duration": 0.415505,
     "end_time": "2023-08-12T15:39:39.081368",
     "exception": false,
     "start_time": "2023-08-12T15:39:38.665863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg8AAAGiCAYAAABgTyUPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAABYNElEQVR4nO3dd1hTZxsG8DussEFFlgri3gsXKo6qKNo66t6zddWFA1Fb1GqxWvu50bpt1WKrtbilTuoGxYkDFyobkS0r5/sDjU2ASDAhAe9fr3NdzZv3vHlOjuLDu45IEAQBRERERIWko+kAiIiIqGRh8kBERERKYfJARERESmHyQEREREph8kBERERKYfJARERESmHyQEREREph8kBERERKYfJARERESmHyQEREREph8kBERKQlzp07hy+++AL29vYQiUQ4cODAB885e/YsnJ2dYWhoiCpVqmDDhg1qj5PJAxERkZZITU1Fw4YNsXbt2kLVf/LkCbp16wZXV1dcv34dc+fOxZQpU7Bv3z61xinig7GIiIi0j0gkwl9//YVevXoVWMfT0xP+/v4IDQ2Vlo0fPx43btzAxYsX1RYbex6IiIjUKCMjA0lJSTJHRkaGStq+ePEi3NzcZMq6dOmCoKAgZGVlqeQz8qOntpaVlBX3WNMh0FtG9q6aDoHecjS30XQI9NZA01qaDoH+Y8nT3WptX5X/Jvms3YmFCxfKlHl7e2PBggUf3XZUVBRsbGR/TtjY2CA7OxtxcXGws7P76M/Ij9YkD0RERFpDkqOypry8vODh4SFTJhaLVda+SCSSef1uNoJ8uSoxeSAiIlIjsVis0mThv2xtbREVFSVTFhMTAz09PZQrV04tnwkweSAiIspLkGg6gkJxcXHBwYMHZcpOnDiBpk2bQl9fX22fywmTRERE8iQS1R1KSElJQUhICEJCQgDkLsUMCQlBeHg4gNwhkOHDh0vrjx8/Hs+ePYOHhwdCQ0OxdetWbNmyBTNnzlTZV5Ef9jwQERHJETTU8xAUFIQOHTpIX7+bKzFixAhs374dkZGR0kQCAJycnHDkyBFMnz4d69atg729PVavXo0+ffqoNU6t2eeBqy20B1dbaA+uttAeXG2hXdS92iIz4o7K2jKwr6uytrQFex6IiIjkKTnc8Klh8kBERCSvhEyY1BROmCQiIiKlsOeBiIhIngo3iSqNmDwQERHJ47CFQhy2ICIiIqWw54GIiEgeV1soxOSBiIhIjqY2iSopOGxBRERESmHPAxERkTwOWyjE5IGIiEgehy0UYvJAREQkj/s8KMQ5D0RERKQU9jwQERHJ47CFQkweiIiI5HHCpEIctiAiIiKlsOeBiIhIHoctFGLyQEREJI/DFgpx2IKIiIiUwp4HIiIiOYLAfR4UYfJAREQkj3MeFOKwBRERESmFPQ9ERETyOGFSISYPRERE8jhsoRCTByIiInl8MJZCnPNARERESmHPAxERkTwOWyjE5IGIiEgeJ0wqVORhi8zMTNy/fx/Z2dmqjIeIiIi0nNLJQ1paGsaMGQNjY2PUrVsX4eHhAIApU6Zg6dKlKg+QiIio2AkS1R2lkNLJg5eXF27cuIEzZ87A0NBQWt6pUyf4+fmpNDgiIiKNkEhUd5RCSs95OHDgAPz8/NCyZUuIRCJpeZ06dfDo0SOVBkdERETaR+nkITY2FtbW1nnKU1NTZZIJIiKiEquU9hioitLDFs2aNcPhw4elr98lDJs2bYKLi4vqIiMiItIQQchR2VEaKZ08+Pj4YN68eZgwYQKys7OxatUqdO7cGdu3b8eSJUvUEaNWCwq5hUmzvdGhxxDUa+2Ok+cuaDqkUuu7bz0Q/jQYyYlhOBnwB+rUqaGwfq9e7rh08QjiYu4iMeEhgq6ewJAhfWTquLZpgQN/bUf402BkZ75Ejx5d1HkJpcaU2eNw4fZx3Hl+Abv+/gXVa1ZRWL96zSpYt205zl47hEdx1zBy3OA8dUxMjTF/8Uycu34Yd55fwB9HtqF+4zrquoQSqcXQTpgRuBIL7m/HxINL4NispsL6lVvUwsSDS7Dg/nbMOLcSzYd0lHlfR08XHab0hsfZ/2HB/e345qgPqrdrkKcdc5sy6Pe/iZh3fSO8Q7fhmyM/wL6ek0qvjUoWpZOHVq1a4fz580hLS0PVqlVx4sQJ2NjY4OLFi3B2dlZHjFotPf0NalargrkeEzUdSqk2a+ZETJv6NaZMm4+WrbojKjoWx47sgampSYHnJLx6DZ+lq9GmbQ80du6EHTv8sGXTz3Dr3E5ax8TEGDdv3sWUafOL4zJKha8nj8DoCUOwwPNH9O48DHEx8dixzxcmpsYFnmNobIjnz15i+ferERMdm28dn5XfoXX7Fpgx8Vt0azsAgWcu4dd9vrCxLa+uSylR6n/eEt2+G46zaw9gXbe5eHr1HkZs94SFfbl865epWB4jts3G06v3sK7bXJxddwDdvUegbtdm0jqdZ/ZD88Edcch7B1Z1mo0ru05iyEYP2NV1lNYxNDfB1/sWICc7BztGLsOqzrNwZPEuvElKVfs1axQnTCokEgRB0HQQAJAV91jTIXy0eq3dscrnW3Rs20rToXwUI3tXTYeQx/Nn17B6zWYs/2k9AMDAwAARL0LgNfcHbNr8W6HbuXL5GI4ePQnvBcvzvJed+RJf9h0Nf//jKov7Yzma22g6hDwu3jmObRt245c1OwAABgb6uBz6D5YtWo09O/Z98Pyz1w5h28bd2L5xt7RMbCjGzaeBGDfMA2cC/pWWHzy9B6dPBOJnn/WqvxAlDTStpdHPH39gESJuP4X//K3Ssqn/LEfoiSCcWJZ3pVuXOQNRq5MzVnWaJS3ruWQ0bGs7YuOX3gAAz8vrcGbtAVz+NUBaZ8gvHshMfYM/pud+526eA+HoXAOb+i9S16UVyZKnuz9c6SOkn96ssraMOoxVWVvaQumeh6SkpHyP5ORkZGZmqiNG+sQ5OTnAzs4GAf+clZZlZmbiXOAluLg0LXQ7n3Vog5o1qiIw8JI6wvwkVHKsAGub8vj3zPvvMDMzC5cvBKNJs7zd3YWlp6cLPT09ZL6R/Rny5k0GnFs2KnK7pYWuvi7s6zkhLPCmTHlY4C04OOc/fFepcXWEBd6SKXt47iYq1HeCjp4uAEDPQA/ZGVkydbLeZMoMh9Tu1AQvbz3GwHVT4RXki0mHf0DTgR1UcVnajT0PCim92sLS0lLhqoqKFSti5MiR8Pb2ho5O/rlJRkYGMjIyZMp0MjIgFouVDYc+AbY2uat7oqPjZMqjo2Ph6FBR4bnm5mYIfxoMsdgAOTk5+GbyXPxzMlBtsZZ25a1zu8jjYuNlyuNjX8G+ol2R201NScO1KzcwaeZYhD18jLiYV/iiT1c0cq6Hp4/DPyrm0sC4jBl09XSREpsoU54SmwhTK4t8zzErb4mHsTfz1NfV14NJGTMkx77Gw3M30XpsNzy9cg+vnkWjSuu6qN3ZWeZndxkHazQf2gnnNx/F2fUHULFhVXy+YASyM7MRsp9/lz5VSvc8bN++Hfb29pg7dy4OHDiAv/76C3PnzkWFChXg6+uLr7/+GqtXr1a426SPjw8sLCxkjh9XbfioC6HSY9Cg3nj96oH00NfPzXHlR9hEIlGeMnnJySlwbuaGlq2649vvluGn5d5o15arggqrR1933Hz6r/TQk94L2XoiUT6FSpox8VuIRCJcvH0CoRGXMOKrgfDfdww5OaXzN7eikP+GP7Q6XpA/4+0J78oPLdyJ+KdRmHbyJyx8uBNfLByJa3+cheQ/vy2LRDqIuP0UAcv9EHnnGa7uPoWre06hxdBOH3s52o07TCqkdM/Djh07sGLFCvTv319a1qNHD9SvXx8bN27EyZMn4eDggCVLlmDu3Ln5tuHl5QUPDw+ZMp3kl8qGQqXUwYMncOXKdelrsdgAAGBrWx5RUTHScmtrK0THxOU5/78EQcCjR08BADdu3EGtWtXgOfsbnD13UfWBl0Inj53FjeDb0tcGBvoAcnsgYv/TE1TWqmye3ghlhT99gcE9voKRsSFMzUwRGx2H1ZuX4kU4fzakJSQjJzsHZuVlexlMrCyQEpeY7znJsa9hVt5SpszUyhw5WdlIS0jJbfdVMnZ9/TP0xPowtjRFUnQCuswZiITn7ye1JsckIPah7D2IfRSBeu7NVXBlWqyUDjeoitI9DxcvXkTjxo3zlDdu3BgXL+b+QG7Tpo30mRf5EYvFMDc3lzk4ZEHvpKSk4tGjp9Lj7t0HiIyMRqeObaV19PX10da1JS5eDFKqbZFIJE1G6MNSU9Lw7Mlz6fHw/mPERMeiTfuW0jr6+npo0coZ167eVNBS4aWnvUFsdBzMLczg2sEF/xw9++GTSrmcrBxE3H6Cam3qy5RXa1MP4cEP8j3n+fWHqNamnmx91wZ4eesJJNmyew9kZ2QhKToBOnq6qNu1OUIDgqXvhQc/gFUV2SEpKydbJLxUnLhT6aZ0z0PFihWxZcuWPMMSW7ZsQaVKlQAA8fHxKFOmjGoi1HJpaekIfxEhff0yIhr3HjyChbkZ7Gzz7sRJRbN6zWbM8ZyMh2FPEBb2BHM8JyMtLR17fv9LWmfb1lWIiIjEvPm5fzY9Z3+D4OAbePT4GQwM9OHetSOGDe2LSd94Sc8xMTFGtWrv16s7VXZAw4Z18epVAp4/f39f6b1tG3ZjwrTRePooHE8fh2PC9NFIT38D/31HpXV+WrcIUZEx+GnxWgC5CUa1t3tB6Bvow9bOGrXr1UBaajqePXkOAHDt4AKRSITHYU/h6FQJcxZMw+Owp/hzt3/xX6QWOr/5CPr+PBEvbz5G+LWHaDb4M1jYW+HKrpMAALfZA2BuUxZ/zvAFAFz57SRaDneD+/yhCNpzCg5NqsO5f3vsnbJG2mbFRlVhblMWkXefwdy2DDpO6wORjg4CNx58/7lbjmLcvgVoN7Enbh2+hIoNq6LZoM9wwGtL8X4Bxa2UDjeoitLJw08//YR+/frh6NGjaNasGUQiEa5evYrQ0FDs25e7TOvq1asYMGCAyoPVRrfvPcToyZ7S18vW/AIA6OneCUvmz9BUWKXO8p/Ww8jIEGtX/4AyZSxw5cp1uHcfjJSU92vNHSrZy4zVmpgYY81qH1SsaIv09De4f/8Rho+cgj/+eP+PUVPnhjj5z5/S1yt+WgAA2LFzL8aMna7+CyuBflmzA4ZGhli4fA4sLMwRcu02RvadiNSUNGkdu4q2MvfC2rY8Dp35Xfr6q2+G46tvhuPS+SAM6fk1AMDM3BQz538DW3sbJL5OxLGDp7BiyTpkZ2cX38VpsVuHLsHY0hQdpn4Js/KWiH7wAjtHLcPrtz0AZtaWsKjwfs+HhBex2DFqGbp/Owwth3VGUkwCDi/cgTvHrkrr6In10XlmP5RxsEZmagYenA7BH9PX403S+3v58uZj7Br3P7jNHoAOU3sj4XksDi/6FTf+Pl98F68JHLZQqEj7PDx79gy+vr548OABBEFArVq1MG7cOLx+/RqNGjUqUiClYZ+H0kIb93n4VGnjPg+fKk3v80Cy1L7Pw9HVKmvLyH2KytrSFkr3PACAo6OjdNji9evX2LVrF/r06YOQkBDk5JTOfbyJiOgTwp4HhZSeMPnOqVOnMHToUNjb22Pt2rVwd3dHUJByk9eIiIi0kgaXaq5fvx5OTk4wNDSEs7MzAgMV76exa9cuNGzYEMbGxrCzs8OoUaMQH/9xq58+RKnk4cWLF1i8eDGqVKmCQYMGoUyZMsjKysK+ffuwePHifFdhEBERUeH4+flh2rRpmDdvHq5fvw5XV1e4u7sXuILx33//xfDhwzFmzBjcuXMHf/zxB65evYqxY9W7JXahk4du3bqhTp06uHv3LtasWYOIiAisWbPmwycSERGVNCrcnjojIyPPIx3kd1l+5+eff8aYMWMwduxY1K5dGytXrkSlSpXg6+ubb/1Lly6hcuXKmDJlCpycnNCmTRuMGzdO7SMBhU4eTpw4gbFjx2LhwoXo3r07dHV11RkXERGR5qhw2CK/XZV9fHzyfGRmZiaCg4Ph5uYmU+7m5oYLFy7kG2arVq3w4sULHDlyBIIgIDo6Gn/++Se6d++ulq/lnUInD4GBgUhOTkbTpk3RokULrF27FrGx+T9al4iIqERTYc+Dl5cXEhMTZQ4vL688HxkXF4ecnBzY2MiusrKxsUFUVFS+YbZq1Qq7du3CgAEDYGBgAFtbW1haWqp9ZKDQyYOLiws2bdqEyMhIjBs3Dr///jsqVKgAiUSCgIAAJCcnqzNOIiKiEknZXZXlHz4pCEKBD6S8e/cupkyZgu+++w7BwcE4duwYnjx5gvHjx6v0GuQpvdrC2NgYo0ePxr///otbt25hxowZWLp0KaytrdGjRw91xEhERFS8NLDawsrKCrq6unl6GWJiYvL0Rrzj4+OD1q1bY9asWWjQoAG6dOmC9evXY+vWrYiMjPyor0CRIi/VBICaNWti2bJlePHiBfbs2aOqmIiIiDRLhcMWhWVgYABnZ2cEBATIlAcEBKBVq1b5npOWlibzCHUA0jmJRdgDstA+Knl4R1dXF7169YK/P/egJyIiKioPDw9s3rwZW7duRWhoKKZPn47w8HDpMISXlxeGDx8urf/FF19g//798PX1xePHj3H+/HlMmTIFzZs3h729vdriLNIOk0RERKWahnaYHDBgAOLj47Fo0SJERkaiXr16OHLkCBwdHQEAkZGRMns+jBw5EsnJyVi7di1mzJgBS0tLfPbZZ/jxxx/VGmeRnm2hDny2hfbgsy20B59toT34bAvtovZnW/gtVFlbRgO8VdaWtlDJsAURERF9OjhsQUREJI8PxlKIyQMREZE8Jg8KcdiCiIiIlMKeByIiInlFeJT2p4TJAxERkTwOWyjE5IGIiEieduxioLU454GIiIiUwp4HIiIieRy2UIjJAxERkTwmDwpx2IKIiIiUwp4HIiIieVyqqRCTByIiIjmChKstFOGwBRERESmFPQ9ERETyOGFSISYPRERE8jjnQSEOWxAREZFS2PNAREQkjxMmFWLyQEREJI9zHhRi8kBERCSPyYNCnPNARERESmHPAxERkTw+klshJg9ERETyOGyhEIctiIiISCnseSAiIpLHpZoKMXkgIiKSxx0mFeKwBRERESmFPQ9ERETyOGyhkNYkD0b2rpoOgd5KjwjUdAj0Vnj7CZoOgd7yT2JH7adE4GoLhfi3gYiIiJSiNT0PREREWoPDFgoxeSAiIpLH1RYKMXkgIiKSx54HhTjngYiIiJTCngciIiJ5XG2hEJMHIiIieRy2UIjDFkRERKQU9jwQERHJ42oLhZg8EBERyeOwhUIctiAiIiKlsOeBiIhIDp9toRiTByIiInkctlCIwxZERESkFPY8EBERyWPPg0JMHoiIiORxqaZCHLYgIiKSJxFUdyhp/fr1cHJygqGhIZydnREYGKiwfkZGBubNmwdHR0eIxWJUrVoVW7duLeqVFwp7HoiIiLSEn58fpk2bhvXr16N169bYuHEj3N3dcffuXTg4OOR7Tv/+/REdHY0tW7agWrVqiImJQXZ2tlrjZPJAREQkR9DQnIeff/4ZY8aMwdixYwEAK1euxPHjx+Hr6wsfH5889Y8dO4azZ8/i8ePHKFu2LACgcuXKao+TwxZERETyVDhskZGRgaSkJJkjIyMjz0dmZmYiODgYbm5uMuVubm64cOFCvmH6+/ujadOmWLZsGSpUqIAaNWpg5syZSE9PV8vX8g6TByIiIjXy8fGBhYWFzJFfL0JcXBxycnJgY2MjU25jY4OoqKh82378+DH+/fdf3L59G3/99RdWrlyJP//8E5MmTVLLtbzDYQsiIiJ5Ktxh0svLCx4eHjJlYrG4wPoikUjmtSAIecrekUgkEIlE2LVrFywsLADkDn307dsX69atg5GR0UdGnz8mD0RERPJUOOdBLBYrTBbesbKygq6ubp5ehpiYmDy9Ee/Y2dmhQoUK0sQBAGrXrg1BEPDixQtUr17944IvAIctiIiItICBgQGcnZ0REBAgUx4QEIBWrVrle07r1q0RERGBlJQUadmDBw+go6ODihUrqi1WJg9ERETyNLTPg4eHBzZv3oytW7ciNDQU06dPR3h4OMaPHw8gdwhk+PDh0vqDBw9GuXLlMGrUKNy9exfnzp3DrFmzMHr0aLUNWQActiAiIspDEDSzVHPAgAGIj4/HokWLEBkZiXr16uHIkSNwdHQEAERGRiI8PFxa39TUFAEBAZg8eTKaNm2KcuXKoX///li8eLFa4xQJmvqG5OgZVNB0CPRWeoTi3cyo+IS3n6DpEOgt/6Tymg6B/mN6+G9qbT9pXBeVtWW+8bjK2tIW7HkgIiKSxwdjKcTkgYiISB6TB4U+KnmIiYnB/fv3IRKJUKNGDVhbW6sqLiIiIo3R1PbUJUWRVlskJSVh2LBhqFChAtq1a4e2bduiQoUKGDp0KBITE1UdIxEREWmRIiUPY8eOxeXLl3Ho0CG8fv0aiYmJOHToEIKCgvDVV1+pOkYiIqLipcFHcpcERRq2OHz4MI4fP442bdpIy7p06YJNmzaha9euKguOiIhII1S3O3WpVKSeh3LlyslshfmOhYUFypQp89FBERERkfYqUvIwf/58eHh4IDIyUloWFRWFWbNm4dtvv1VZcERERJogSASVHaVRkYYtfH19ERYWBkdHRzg4OAAAwsPDIRaLERsbi40bN0rrXrt2TTWREhERFZdS+o++qhQpeejVq5eKwyAiIqKSokjJg7e3t6rjICIi0h6cMKnQR+8w+ebNG/j5+SE1NRWdO3dW27PDiYiIiktpnaugKkolD7NmzUJmZiZWrVoFAMjMzETLli1x9+5dGBsbY/bs2Thx4kSBzx0nIiKikk+p1RZHjx5Fx44dpa937dqF8PBwPHz4EAkJCejXrx+WLFmi8iA16btvPRD+NBjJiWE4GfAH6tSpobB+r17uuHTxCOJi7iIx4SGCrp7AkCF9ZOq4tmmBA39tR/jTYGRnvkSPHqp7etunLijkFibN9kaHHkNQr7U7Tp67oOmQSh3zAZ/D4dgOOAUfREW/tTBsUq9Q5xk2roMqIUdQ8c/1MuX6VR1h879v4XB8B6rePg6Lob3VEXap1GBYJ4z+92dMfrAVgw9/jwrNaxZY18TaEu6rJ2LE6eWY9nQn2nkPzbee2NwYHb4fga+D1mLyg60YfvJHVO7QUF2XoL0kKjxKIaWSh/DwcNSpU0f6+sSJE+jbty8cHR0hEokwdepUXL9+XeVBasqsmRMxberXmDJtPlq26o6o6FgcO7IHpqYmBZ6T8Oo1fJauRpu2PdDYuRN27PDDlk0/w61zO2kdExNj3Lx5F1OmzS+Oy/ikpKe/Qc1qVTDXY6KmQymVTLq2g9Wc8UjYtAcv+k1E+rXbsNuwGHq2ih9XrWNqDOsfZiH9ct6fDzpGYmS/iMSrlVuRHRuvrtBLnRpftEB776G4stYfu7rNx8sr99FrxyyY2ZfLt76ugR7SXyXjytq/EXs3PN86Ovq6+HLXHJhXLI9D41dhe4dZ+GfOFqREJajzUrQSl2oqptSwhY6ODgTh/Rdx6dIlmX0dLC0tkZBQev6QTZk8Fj5LV+PAgaMAgFGjpyHiRQgGDeyNTZvzf5b82XMXZV6vWbsFw4b1Q+vWzXEi4CwA4Njx0zh2/LR6g/9Eubo0g6tLM02HUWpZDv8SSfuPI3nfMQBA/I8bYNzaGeYDP8erldsKPM/KeyqSD58GJBKYfCY7rJlx+wEybj8AAJSdNlp9wZcyTca647bfGdz+/QwA4OzC3+DYtj4aDOuI8z/uzVM/6UUcziz4FQBQt3+7PO8DQL0B7WBoaQK/3gshyc4BACS//EQTulLaY6AqSvU81KpVCwcPHgQA3LlzB+Hh4ejQoYP0/WfPnsHGxka1EWqIk5MD7OxsEPDPWWlZZmYmzgVegotL00K381mHNqhZoyoCAy+pI0yi4qOnB3Gd6ki/ECxTnHYhGIYN6xRwEmDWyw36leyQ4Jt/wk3K09HXhU19Jzw7d1umPDzwNuydiz5pvUqnJogMDsNni0fg6+B1GBbgg2aTekCkI/rYkKmUUXrC5KBBg3D48GHcuXMH3bp1g5OTk/T9I0eOoHnz5h9sJyMjAxkZGTJlgiBAJNKeP6C2NrmPF4+OjpMpj46OhaNDRYXnmpubIfxpMMRiA+Tk5OCbyXPxz8lAtcVKVBx0y5hDpKeL7PjXMuU58a+ha5X/tvT6DvYoO300IobPAHL4q5yqGJU1g46eLtLiZJ9inBqbCMfylkVu18LBGpVaWeHegQs4MHI5LCvb4rPFI6Cjp4PLqw58XNAljMA/rgop1fPQp08fHDlyBA0aNMD06dPh5+cn876xsTEmTvzwWLOPjw8sLCxkDkGSrFzkKjZoUG+8fvVAeujr5+ZV/x2mAQCRSJSnTF5ycgqcm7mhZavu+Pa7ZfhpuTfatXVRW+xExUr+z79IBOT3V0JHB9bL5iBh3a/IevayWEL75OT5+ZS3TBkiHRHS4pPwz5wtiLn1FA8OXsKVNf5oOKzTRwZaAnHCpEJK7/PQqVMndOqU/x+kwm4e5eXlBQ8PD5myMuVqKRuKSh08eAJXrryfzCUWGwAAbG3LIyoqRlpubW2F6Ji4POf/lyAIePToKQDgxo07qFWrGjxnf5NnPgRRSZKTkAQhOwd6VmXw335D3bIWyInPO9dJx8QIhvVqQlyrGqzmTnpbKIJIRwdVQo4g8msvpF+5UTzBlzLpr5Ihyc6BsVwvg7GVRZ7eCGWkxryGJDtHZpLfq7CXMLG2hI6+LiRZOUVum0qXIm8SlZCQgC1btiA0NBQikQi1atXC6NGjUbZs2Q+eKxaLIRaLZco0PWSRkpKKlJRUmbLIyGh06tgWISF3AAD6+vpo69oSXnN/UKptkUgkTUaISqzsbGTcfQgjlyZIPfl+CayxSxOkns6bGEtS0vC819cyZeYDv4BR80aI9vgeWS+j1B5yaSXJykH0rSdwdK2HR8eDpOUOrvXw6ESwgjMViwh6iJo9Xd72JuUmEGWq2CElOuGTSxw4bKFYkZKHs2fPokePHrCwsEDTprmTB9esWYPvv/8e/v7+aNcu/5m8Jc3qNZsxx3MyHoY9QVjYE8zxnIy0tHTs+f0vaZ1tW1chIiIS8+YvBQB4zv4GwcE38OjxMxgY6MO9a0cMG9oXk77xkp5jYmKMatXezxVxquyAhg3r4tWrBDx/HlF8F1gKpaWlI/zF++/wZUQ07j14BAtzM9jZWmswstLh9c79sPGZhYw7D/DmRijM+3aDnp01kvwOAwDKThsFPWsrxMxdDggCMsOeyZyf8+o1hMxM2XI9PRhUzX3AnkhfH3o25WBQswokaW+Qzb8PBbq2+Si6/m8Com8+RuS1MNQf3AFm9uVw87eTAIDWnv1halsGx6e/f1Bh+Tq537OBiRhGZc1Qvo4DcrKy8eph7vd849d/0GhkZ7RfMAwh20+gjJMtmk3qgZBtx4v/AjWNyYNCRUoeJk2ahAEDBsDX1xe6uroAgJycHEycOBGTJk3C7du3P9BCybD8p/UwMjLE2tU/oEwZC1y5ch3u3QfL9FA4VLKHRPL+T5mJiTHWrPZBxYq2SE9/g/v3H2H4yCn44w9/aZ2mzg1x8p8/pa9X/LQAALBj516MGTtd/RdWit2+9xCjJ3tKXy9b8wsAoKd7JyyZP0NTYZUaqcfOIs7CDGXGD4Fe+bLIfPgMkRPmIzsyd2hP16os9OwU7/kgT8+6HCrt85W+thzVD5aj+iH96g1EjJqt0vhLkwcHL8PQ0gwtpvaGibUl4h+8wIERy6VLK02sLWFmbyVzztBj73tNbRpUQe3erZH4PBZbW+f+3EmJfIX9Q39Eu++GYtjxH5ASnYDrW48jyPdg8V0YlQgi4UOz//JhZGSEkJAQ1Kwpu5vZ/fv30ahRI6SnpysdiJ5BBaXPIfVIj+DKEG0R3n6CpkOgt/yTlEuKSL2mh6t36W9sZ9X1oJcPOPvhSiWMUqst3mnSpAlCQ0PzlIeGhqJRo0YfGxMREZFGCRLVHaVRoYctbt68Kf3/KVOmYOrUqQgLC0PLli0B5O42uW7dOixdulT1URIRERWj0vqPvqoUethCR0enUHsciEQi5OQoPyuXwxbag8MW2oPDFtqDwxbaRd3DFtEdVDdsYXO69A1bFLrn4cmTJ+qMg4iISHsI2rPjsTYqdPLg6OiozjiIiIi0BoctFCt08uDv7w93d3fo6+vD399fYd0ePXp8dGBERESknQqdPPTq1QtRUVGwtrZGr169CqxX1DkPRERE2kKQcNhCkUInD//dCOm//09ERFTacNhCMaX2ebh8+TKOHj0qU7Zz5044OTnB2toaX3/9dZ5HbRMREVHpolTysGDBApn9Hm7duoUxY8agU6dOmDNnDg4ePAgfHx+VB0lERFScBEGksqM0Uip5CAkJQceOHaWvf//9d7Ro0QKbNm2Ch4cHVq9ejb1796o8SCIiouLEHSYVUyp5SEhIgI2NjfT12bNn0bVrV+nrZs2a4fnz56qLjoiIiLSOUsmDjY2NdLOozMxMXLt2DS4uLtL3k5OToa+vr9oIiYiIipkgEansKI2USh66du2KOXPmIDAwEF5eXjA2Noarq6v0/Zs3b6Jq1aoqD5KIiKg4CYLqjtKo0Es1AWDx4sX48ssv0a5dO5iammLHjh0wMDCQvr9161a4ubmpPEgiIqLiVFp7DFRFqeShfPnyCAwMRGJiIkxNTaGrqyvz/h9//AFTU1OVBkhERETaRank4R0LC4t8y8uWLftRwRAREWkD9jwoVqTkgYiIqDQrrXMVVEWpCZNERERE7HkgIiKSw2ELxZg8EBERySmt20qrCoctiIiISClMHoiIiORo8tkW69evh5OTEwwNDeHs7IzAwMBCnXf+/Hno6emhUaNGyn+okpg8EBERyZEIIpUdyvDz88O0adMwb948XL9+Ha6urnB3d0d4eLjC8xITEzF8+HCZh1eqE5MHIiIiNcrIyEBSUpLMkZGRkW/dn3/+GWPGjMHYsWNRu3ZtrFy5EpUqVYKvr6/Czxg3bhwGDx4s87wpdWLyQEREJEcQRCo7fHx8YGFhIXP4+Pjk+czMzEwEBwfnecyDm5sbLly4UGCs27Ztw6NHj+Dt7a3y76EgXG1BREQkR5VLNb28vODh4SFTJhaL89SLi4tDTk4ObGxsZMptbGwQFRWVb9sPHz6UPrBST6/4/kln8kBERCRHlTtMisXifJOFgohEsomLIAh5ygAgJycHgwcPxsKFC1GjRo2PjlMZTB6IiIi0gJWVFXR1dfP0MsTExOTpjQCA5ORkBAUF4fr16/jmm28AABKJBIIgQE9PDydOnMBnn32mlliZPBAREcnRxA6TBgYGcHZ2RkBAAHr37i0tDwgIQM+ePfPUNzc3x61bt2TK1q9fj1OnTuHPP/+Ek5OT2mJl8kBERCRH2SWWquLh4YFhw4ahadOmcHFxwS+//ILw8HCMHz8eQO78iZcvX2Lnzp3Q0dFBvXr1ZM63traGoaFhnnJVY/JARESkJQYMGID4+HgsWrQIkZGRqFevHo4cOQJHR0cAQGRk5Af3fCgOIkHQjgeP6hlU0HQI9FZ6ROF2MyP1C28/QdMh0Fv+SeU1HQL9x/Tw39Ta/i2nL1TWVv0nB1XWlrZgzwMREZEc7fi1WntxkygiIiJSCnseiIiI5GhqwmRJweSBiIhIjsDkQSEOWxAREZFS2PNAREQkhxMmFWPyQEREJIdzHhTTmuTB0Tzvvt2kGdxbQHs4nPHVdAj0VrmG32k6BCpGnPOgGOc8EBERkVK0pueBiIhIW3DYQjEmD0RERHI4X1IxDlsQERGRUtjzQEREJIfDFooxeSAiIpLD1RaKcdiCiIiIlMKeByIiIjkSTQeg5Zg8EBERyRHAYQtFOGxBRERESmHPAxERkRwJN3pQiMkDERGRHAmHLRRi8kBERCSHcx4U45wHIiIiUgp7HoiIiORwqaZiTB6IiIjkcNhCMQ5bEBERkVLY80BERCSHwxaKMXkgIiKSw+RBMQ5bEBERkVLY80BERCSHEyYVY/JAREQkR8LcQSEOWxAREZFS2PNAREQkh8+2UIzJAxERkRw+VFMxJg9ERERyuFRTMc55ICIiIqWw54GIiEiORMQ5D4oweSAiIpLDOQ+KcdiCiIiIlMKeByIiIjmcMKlYkZMHiUSCsLAwxMTEQCKR/Zrbtm370YERERFpCneYVKxIycOlS5cwePBgPHv2DIIgOzIkEomQk5OjkuCIiIhI+xQpeRg/fjyaNm2Kw4cPw87ODiLOSiUiolKEO0wqVqTk4eHDh/jzzz9RrVo1VcdDRESkcVxtoViRVlu0aNECYWFhqo6FiIiISoBC9zzcvHlT+v+TJ0/GjBkzEBUVhfr160NfX1+mboMGDVQXIRERUTHjhEnFCp08NGrUCCKRSGaC5OjRo6X//+49TpgkIqKSTpNLNdevX4/ly5cjMjISdevWxcqVK+Hq6ppv3f3798PX1xchISHIyMhA3bp1sWDBAnTp0kWtMRY6eXjy5Ik64yAiItIamprz4Ofnh2nTpmH9+vVo3bo1Nm7cCHd3d9y9excODg556p87dw6dO3fGDz/8AEtLS2zbtg1ffPEFLl++jMaNG6stTpEgv9ZSQ6paNdF0CPTWCdvymg6B3nI446vpEOitPQ2/03QI9B/DX/6m1va3VRiqsrZGKRFrixYt0KRJE/j6vv+7X7t2bfTq1Qs+Pj6FaqNu3boYMGAAvvtOfX9mizRh0sfHB1u3bs1TvnXrVvz4448fHZQ2mTJ7HC7cPo47zy9g19+/oHrNKgrrV69ZBeu2LcfZa4fwKO4aRo4bnKeOiakx5i+eiXPXD+PO8wv448g21G9cR12XUCqYD/gcDsd2wCn4ICr6rYVhk3qFOs+wcR1UCTmCin+ulynXr+oIm/99C4fjO1D19nFYDO2tjrA/aUEhtzBptjc69BiCeq3dcfLcBU2HVOrUHNEJvS/+jCGPtqL70e9h3bxmgXUd3Jui0x5P9L+5HgPvbYK7vzfs29WXqVN9cHt02f8tBtzZiAF3NqLz73NQrpHin3mllUSkuiMjIwNJSUkyR0ZGRp7PzMzMRHBwMNzc3GTK3dzccOFC4f7+SCQSJCcno2zZsir5HgpSpORh48aNqFWrVp7yunXrYsOGDR8dlLb4evIIjJ4wBAs8f0TvzsMQFxOPHft8YWJqXOA5hsaGeP7sJZZ/vxox0bH51vFZ+R1at2+BGRO/Rbe2AxB45hJ+3ecLG/7Gny+Tru1gNWc8EjbtwYt+E5F+7TbsNiyG3ge+Lx1TY1j/MAvpl6/nfc9IjOwXkXi1ciuyY+PVFfonLT39DWpWq4K5HhM1HUqpVLlHCzRdMBS3VvvjUJf5iL5yHx1/mwUT+3L51rduWQuR527j5LCfcNh9PqIuhKLD9hkoW9dRWsfGpTae/n0RJ/ovwdEeC5D6Mh6dd3vCyLZMcV2W1pCo8PDx8YGFhYXMkV8vQlxcHHJycmBjYyNTbmNjg6ioqELFvWLFCqSmpqJ///7KX7QSipQ8REVFwc7OLk95+fLlERkZ+dFBaYtR4wdj/c9bcOLwKTy49wizJn0HIyND9OjjXuA5t67fxdIFK3HorxPIzMjK877YUIwun3+GHxeuwtWL1/DsyXOsXrYRz59FYMiofuq8nBLLcviXSNp/HMn7jiHr8XPE/7gB2VGxMB/4ucLzrLynIvnwaby5EZrnvYzbDxC/YjNSjp6FkJn3PtHHc3Vphilfj0Dn9q01HUqpVPsrd4T9fgZhe84gMSwCQd6/ITUiHjWGd8y3fpD3b7jjexjxNx4j+Uk0ri/di+QnUajY+f24+L+TfXF/xz9IuBOOpEeRuDhrM6CjA7s2dYvrskolLy8vJCYmyhxeXl4F1pffePHdYoQP2bNnDxYsWAA/Pz9YW1t/dNyKFCl5qFSpEs6fP5+n/Pz587C3t//ooLRBJccKsLYpj3/PXJKWZWZm4fKFYDRpVvSlqHp6utDT00Pmm0yZ8jdvMuDcslGR2y219PQgrlMd6ReCZYrTLgTDsGHBQz1mvdygX8kOCb7qHRcl0gQdfV2Ua+CEiLO3Zcojz95G+abVC9eISAR9U0NkvE4tsIqukRg6errIeJ3yMeGWSKrseRCLxTA3N5c5xGJxns+0srKCrq5unl6GmJiYPL0R8vz8/DBmzBjs3bsXnTp1KvqFF1KRkoexY8di2rRp2LZtG549e4Znz55h69atmD59Or766itVx6gR5a1zu/7i5Lq042Nfwcraqsjtpqak4dqVG5g0cyysba2go6ODnv26oZFzPVjbFL3d0kq3jDlEerrIjn8tU54T/xq6Vvl3peo72KPs9NGI8fwRyOGz8aj0EZc1g46eLt7EJcqUp8clwsjaslBt1B3XDXrGYjw7eLnAOk3mDkBaVAIiA+98TLglkiBS3VFYBgYGcHZ2RkBAgEx5QEAAWrVqVeB5e/bswciRI7F792507969qJeslCJtTz179my8evUKEydORGZm7m/QhoaG8PT0VNgV805GRkaeySKCIIFIVKRcRiV69HXH4p/mSV+PHTwFACC/FkUkyqdQSTMmfoulq71x8fYJZGdn487Ne/Dfdwx1G+SdR0Jv5Xcj8rsNOjqwXjYHCet+Rdazl8USGpGm5H0wIQr186lyTxc0mNEbZ0b/D2/ik/KtU3dCdzj1dMHxfksgyWcIltTDw8MDw4YNQ9OmTeHi4oJffvkF4eHhGD9+PIDcIZCXL19i586dAHITh+HDh2PVqlVo2bKltNfCyMgIFhYWaotT6eQhJycH//77Lzw9PfHtt98iNDQURkZGqF69er7dMPnx8fHBwoULZcosjWxR1jjvPIricvLYWdwIft8FaGCQu2tmeetyiI2Ok5aXtSqbpzdCWeFPX2Bwj69gZGwIUzNTxEbHYfXmpXgRzn/s5OUkJEHIzoGeVRn8N93ULWuBnPiEPPV1TIxgWK8mxLWqwWrupLeFIoh0dFAl5Agiv/ZC+pUbxRM8kZpkvEqGJDsHRuUtZcoNy1kgPTYx/5PeqtyjBVqtGIuz49YU2KNQZ1w31J/cAwEDl+J16HNVhV2iaKrPcsCAAYiPj8eiRYsQGRmJevXq4ciRI3B0zJ3YGhkZifDwcGn9jRs3Ijs7G5MmTcKkSZOk5SNGjMD27dvVFqfSyYOuri66dOmC0NBQODk5oVmzZkp/qJeXFzw8PGTKGjm1VbodVUpNSUNqSppMWUx0LNq0b4m7t+4DAPT19dCilTOWLVqtks9MT3uD9LQ3MLcwg2sHF/y4cJVK2i1VsrORcfchjFyaIPXk+6VKxi5NkHr6Yp7qkpQ0PO/1tUyZ+cAvYNS8EaI9vkfWy8LNWCbSZpKsHMTffAL7tvXw/FiQtNyubT08Px5c4HmVe7qg1YqvEDhpHV6eDMm3Tt3x3VF/ak/8M+RHxN/8dDcH1OSA58SJEzFxYv6rlOQTgjNnzqg/oHwUadiifv36ePz4MZycnIr0oWKxOE8vhSaHLAqybcNuTJg2Gk8fhePp43BMmD4a6elv4L/vqLTOT+sWISoyBj8tXgsgN8Go9nYvCH0DfdjaWaN2vRpIS03Hsye5GbxrBxeIRCI8DnsKR6dKmLNgGh6HPcWfu/2L/yJLgNc798PGZxYy7jzAmxuhMO/bDXp21kjyOwwAKDttFPSsrRAzdzkgCMgMeyZzfs6r1xAyM2XL9fRgUDV3tzaRvj70bMrBoGYVSNLeIPt5RLFdW2mWlpaO8Bfvv8uXEdG49+ARLMzNYGer3pngn4LQTUfRetUExN94jNjgMFQf2gEmFcrhwa8nAQCN5/SHsV0ZnJ+6EUBu4tBm1Thc9f4NsdfCYFg+t0s7500mspLTAeQOVTSa1ReB36xHyvM4aZ3s1DfITsu7LwF9uoqUPCxZsgQzZ87E999/D2dnZ5iYmMi8b25urpLgNO2XNTtgaGSIhcvnwMLCHCHXbmNk34kyPRR2FW0hkbzPUa1ty+PQmd+lr7/6Zji++mY4Lp0PwpCeub8Rm5mbYub8b2Brb4PE14k4dvAUVixZh+zs7OK7uBIk9dhZxFmYocz4IdArXxaZD58hcsJ8ZEfGAAB0rcpCz065PTL0rMuh0r73O7hZjuoHy1H9kH71BiJGzVZp/J+q2/ceYvRkT+nrZWt+AQD0dO+EJfNnaCqsUuOp/2WIy5ihwfTeMLK2xOv7L3By2HKkvswdVjWysYSJ/ftJ2DWGfgYdfT20+GEkWvwwUloetvccLkzPvTc1R3SCrlgf7TdNlfmsGyv248bP+9V/UVpEK7Ze1mJF2p5aR+d9L8F/155+zIOxuD219uD21NqD21NrD25PrV3UvT31KgfVbU89Nbz0LRkvUs/D6dOnVR0HERGR1uAib8WKlDy0a9dO1XEQERFRCVGk5OGdtLQ0hIeHS/d6eKdBg6LvwEhERKRp7HlQrEjJQ2xsLEaNGoWjR4/m+35R5jwQERFpC06YVKxI6yOnTZuGhIQEXLp0CUZGRjh27Bh27NiB6tWrw9+fyw2JiIhKsyL1PJw6dQp///03mjVrBh0dHTg6OqJz584wNzeHj49Pse2tTUREpA4SJZ5J8SkqUs9Damqq9HGfZcuWRWxsLIDczaOuXbumuuiIiIg0QJVP1SyNipQ81KxZE/fv527Z3KhRI2zcuBEvX77Ehg0bYGenuedTEBERkfoVadhi2rRpiIyMBAB4e3ujS5cu2LVrFwwMDNT6IA4iIqLiwAmTiimVPKSlpWHWrFk4cOAAsrKycOLECaxevRpPnz7FvXv34ODgACsrqw83REREpMUkTB8UUmrYwtvbG9u3b0f37t0xaNAgBAQEYMKECTA2NkaTJk2YOBAREX0ClOp52L9/P7Zs2YKBAwcCAIYMGYLWrVsjJycHurq6agmQiIiouJXWiY6qolTPw/Pnz+Hq6ip93bx5c+jp6SEigo8wJiKi0kNQ4VEaKdXzkJOTAwMDA9kG9PT4KGkiIipV2POgmFLJgyAIGDlyJMRisbTszZs3GD9+PExMTKRl+/d/Ws99JyIi+pQolTyMGDEiT9nQoap75jkREZE24A6TiimVPGzbtk1dcRAREWkNLtVUrEg7TBIREdGnq0g7TBIREZVm7HdQjMkDERGRHK62UIzDFkRERKQU9jwQERHJ4YRJxZg8EBERyWHqoBiHLYiIiEgp7HkgIiKSwwmTijF5ICIiksM5D4oxeSAiIpLD1EExznkgIiIipbDngYiISA7nPCjG5IGIiEiOwIELhThsQUREREphzwMREZEcDlsoxuSBiIhIDpdqKsZhCyIiIlIKex6IiIjksN9BMSYPREREcjhsoRiHLYiIiEgp7HkgIiKSw9UWijF5ICIiksNNohRj8kBERCSHPQ+Kcc4DERERKUVreh4GmtbSdAj0ln8Sc0ptUa7hd5oOgd4adGORpkOgYsRhC8W0JnkgIiLSFhy2UIy/YhIREWmR9evXw8nJCYaGhnB2dkZgYKDC+mfPnoWzszMMDQ1RpUoVbNiwQe0xMnkgIiKSIxEElR3K8PPzw7Rp0zBv3jxcv34drq6ucHd3R3h4eL71nzx5gm7dusHV1RXXr1/H3LlzMWXKFOzbt08VX0OBRIKg5JWpybzKgzUdAr1lJWFOqS3K5Wg6AnqHcx60i75VFbW2P9TxS5W1teXBHmRkZMiUicViiMXiPHVbtGiBJk2awNfXV1pWu3Zt9OrVCz4+Pnnqe3p6wt/fH6GhodKy8ePH48aNG7h48aLKrkEe/5UgIiJSIx8fH1hYWMgc+SUCmZmZCA4Ohpubm0y5m5sbLly4kG/bFy9ezFO/S5cuCAoKQlZWluouQg4nTBIREclR5bMtvLy84OHhIVOWX69DXFwccnJyYGNjI1NuY2ODqKiofNuOiorKt352djbi4uJgZ2f3kdHnj8kDERGRHFUu1SxoiKIgIpFINhZByFP2ofr5lasShy2IiIi0gJWVFXR1dfP0MsTExOTpXXjH1tY23/p6enooV66c2mJl8kBERCRHosKjsAwMDODs7IyAgACZ8oCAALRq1Srfc1xcXPLUP3HiBJo2bQp9fX0lPl05TB6IiIjkSCCo7FCGh4cHNm/ejK1btyI0NBTTp09HeHg4xo8fDyB3/sTw4cOl9cePH49nz57Bw8MDoaGh2Lp1K7Zs2YKZM2eq9PuQxzkPREREcjS1PfWAAQMQHx+PRYsWITIyEvXq1cORI0fg6OgIAIiMjJTZ88HJyQlHjhzB9OnTsW7dOtjb22P16tXo06ePWuPkPg+UB/d50B7c50F7cJ8H7aLufR76OvZQWVt/PvNXWVvagj0PREREcvhsC8WYPBAREcnRkk55rcX+aSIiIlIKex6IiIjkqHKHydKIyQMREZEcznlQjMMWREREpBT2PBAREcnR1D4PJQWTByIiIjmc86AYhy2IiIhIKex5ICIiksN9HhRj8kBERCSHqy0UY/JAREQkhxMmFeOcByIiIlIKex6IiIjkcLWFYkweiIiI5HDCpGIctiAiIiKlsOeBiIhIDoctFGPyQEREJIerLRTjsAUREREphT0PREREciScMKkQkwciIiI5TB0U47AFERERKYU9D0RERHK42kKxIvc8PHr0CPPnz8egQYMQExMDADh27Bju3LmjsuCIiIg0QQJBZUdpVKTk4ezZs6hfvz4uX76M/fv3IyUlBQBw8+ZNeHt7qzRAIiKi4iYIgsqO0qhIycOcOXOwePFiBAQEwMDAQFreoUMHXLx4UWXBERERkfYp0pyHW7duYffu3XnKy5cvj/j4+I8OioiISJNK63CDqhSp58HS0hKRkZF5yq9fv44KFSp8dFBERESaJKjwv9KoSD0PgwcPhqenJ/744w+IRCJIJBKcP38eM2fOxPDhw1UdY7FoMbQT2oz7HGbWloh58BKHF+3Es6v3C6xfuUUtdJs/DNY1KiA5+jUCNx7ElV0npe/r6Omi3cQeaNynLcxtyyDucSSOL92Dh2dvyrRjblMGXeYMQo32DaFnaID4J5HYP3sTIm4/Udu1lkQNhnVC03HdYGJtifiHL3F24W94eSX/+2NibYm28wfDur4TyjjZ4Pq2Ezi78Lc89cTmxmg1qx+quzeD2NwYic9jcW7xbjw9fUPdl1Oi1RzRCXXGd4OxtSVeP3iJq96/IaaAe+Hg3hQ1hndE2bqO0DHQR+KDF7ixYj8izt6S1qk+uD2q9HWFZc2KAIBXt57g2tK9iA95XCzX8ykICrmFbbv/xN17YYiNf4VVPt+iY9tWmg6LSrAi9TwsWbIEDg4OqFChAlJSUlCnTh20bdsWrVq1wvz581Udo9rV/7wlun03HGfXHsC6bnPx9Oo9jNjuCQv7cvnWL1OxPEZsm42nV+9hXbe5OLvuALp7j0Ddrs2kdTrP7IfmgzvikPcOrOo0G1d2ncSQjR6wq+sorWNoboKv9y1ATnYOdoxchlWdZ+HI4l14k5Sq9msuSWp80QLtvYfiylp/7Oo2Hy+v3EevHbNgVsD90TXQQ/qrZFxZ+zdi74bnW0dHXxdf7poD84rlcWj8KmzvMAv/zNmClKgEdV5KiVe5Rws0XTAUt1b741CX+Yi+ch8df5sFkwLuhXXLWog8dxsnh/2Ew+7zEXUhFB22z0DZ//w9sHGpjad/X8SJ/ktwtMcCpL6MR+fdnjCyLVNcl1Xqpae/Qc1qVTDXY6KmQykxOGFSMaV7HgRBQEREBDZt2oTvv/8e165dg0QiQePGjVG9enV1xKh2rcd2Q/DeMwjyOwMAOLLoV1Rv2wAthnbCiWV+eeo3H9oRryPicWTRrwCA2EcRqNCgCtp8/TnuHLsKAGjU2xVn1h7AgzMhAIArv/2D6m0boM3Y7vhj+noAQNsJXyAxIh77Z22Utv36RZwar7RkajLWHbf9zuD272cAAGcX/gbHtvXRYFhHnP9xb576SS/icGZB7r2p279dvm3WG9AOhpYm8Ou9EJLsHABA8kvO1/mQ2l+5I+z3MwjbcwYAEOT9G+zb1UeN4R1xfWneexHkLdvjc33pXlRya4KKnRvj1Z1nAIB/J/vK1Lk4azMcujeHXZu6ePznv+q5kE+Mq0szuLo0+3BFkuKcB8WKlDxUr14dd+7cQfXq1VGlShV1xFVsdPV1YV/PCed8/WXKwwJvwcG5Rr7nVGpcHWGBt2TKHp67Cef+7aGjpwtJdg70DPSQnZElUyfrTSYcm9WUvq7dqQkenruJgeumwqlFLSRFJ+DyrwEI+v20iq6u5NPR14VNfSdcXX9Ipjw88DbsnYuerFbp1ASRwWH4bPEIVOnsjPRXSbh34CKCfA9CkPCHRn509HVRroETbq+TvReRZ2+jfNNC3guRCPqmhsh4XXDvmq6RGDp6ush4nfIx4RKRGik9bKGjo4Pq1at/1KqKjIwMJCUlyRzZQk6R2/sYxmXMoKuni5TYRJnylNhEmFpZ5HuOWXnLfOvr6uvBpIwZgNxkovXYbihX2RYikQhV29RD7c7OMCtvKT2njIM1mg/thPinUdg+Yimu7PoHny8YgUZfuqr2Ikswo7Jm0NHTRVqc7PedGpsI4/98l8qycLBG9W7NINLRwYGRy3F59d9w/todzSf3/MiISy/x23vxRu5epMclwsjaslBt1B3XDXrGYjw7eLnAOk3mDkBaVAIiA7nhHGkOhy0UK9Kch2XLlmHWrFm4fft2kT7Ux8cHFhYWMseFxLtFaktV5G+vSPSh+nJnvD3hXfmhhTsR/zQK007+hIUPd+KLhSNx7Y+zkEgk/zlFBxG3nyJguR8i7zzD1d2ncHXPKbQY2uljL6f0kfsLKBLlLVOGSEeEtPgk/DNnC2JuPcWDg5dwZY0/Gg7jd/8h8j8MC3svKvd0QYMZvXFuwlq8iU/Kt07dCd3h1NMFZ75aCYlczx1RceIOk4oVabXF0KFDkZaWhoYNG8LAwABGRkYy77969Urh+V5eXvDw8JApW1L/q6KE8tHSEpKRk50Ds/KyvQwmVhZIkfsN653k2NcyPQgAYGpljpysbKQl5Ha1pr1Kxq6vf4aeWB/GlqZIik5AlzkDkfA89n07MQmIffhSpp3YRxGo595cBVdWOqS/SoYkOydPL4OxlUWe3ghlpMa8hiQ7R2aI4lXYS5hYW0JHXxeSLM30hGmzjLf3wkjuXhiWs0B6rOJ7UblHC7RaMRZnx60psEehzrhuqD+5BwIGLsXr0OeqCpuI1KBIycPKlSs/6kPFYjHEYrFsICLdj2qzqHKychBx+wmqtamPu8eDpOXV2tRDaEBwvuc8v/4QtTo2kSmr5toAL289kU6+eyc7IwtJ0QnQ0dNF3a7Ncevw++7a8OAHsKpiJ1PfyskWCS85afIdSVYOom89gaNrPTz6z/1xcK2HRyfyvz+FERH0EDV7uuT+2vz2t+YyVeyQEp3AxKEAkqwcxN98Avu29fD82Pt7Yde2Hp4fL/heVO7pglYrvkLgpHV4eTIk3zp1x3dH/ak98c+QHxF/k8uUSfNK6/4MqlKk5GHEiBGqjkOjzm8+gr4/T8TLm48Rfu0hmg3+DBb2VtJ9G9xmD4C5TVn8OSN3VviV306i5XA3uM8fiqA9p+DQpDqc+7fH3ilrpG1WbFQV5jZlEXn3Gcxty6DjtD4Q6eggcOPB95+75SjG7VuAdhN74tbhS6jYsCqaDfoMB7y2FO8XoOWubT6Krv+bgOibjxF5LQz1B3eAmX053Pwt9/609uwPU9syOD79/aqV8nUcAAAGJmIYlTVD+ToOyMnKxquHEQCAG7/+g0YjO6P9gmEI2X4CZZxs0WxSD4RsO178F1iChG46itarJiD+xmPEBoeh+tAOMKlQDg9+zb0Xjef0h7FdGZyfmnsvKvd0QZtV43DV+zfEXguD4dsevpw3mchKTgeQO1TRaFZfBH6zHinP46R1slPfIDstQwNXWfqkpaUj/EWE9PXLiGjce/AIFuZmsLO11mBk2ktSSucqqMpHP5I7PT0dWVmyY5Pm5uYf22yxunXoEowtTdFh6pcwK2+J6AcvsHPUMrx+2wNgZm0Jiwrv17EnvIjFjlHL0P3bYWg5rDOSYhJweOEO6TJNANAT66PzzH4o42CNzNQMPDgdgj+mr8ebpDRpnZc3H2PXuP/BbfYAdJjaGwnPY3F40a+48ff54rv4EuDBwcswtDRDi6m9czeJevACB0Ysly6tNLG2hJm9lcw5Q4/9IP1/mwZVULt3ayQ+j8XW1tMBACmRr7B/6I9o991QDDv+A1KiE3B963EE+R4EFeyp/2WIy5ihwfTeMLK2xOv7L3By2HKkvr0XRjaWMPnPvagx9DPo6OuhxQ8j0eKHkdLysL3ncGH6LwByN53SFeuj/aapMp91Y8V+3Ph5v/ov6hNw+95DjJ7sKX29bE3ud9/TvROWzJ+hqbC0GnseFBMJRZgKmpqaCk9PT+zduzffVRc5Ocp3+86rPFjpc0g9rCRFflI7qVg5jqBojUE3Fmk6BPoPfSv1bhNQ16aFytq6E13w6qKSqkj/SsyePRunTp3C+vXrIRaLsXnzZixcuBD29vbYuXOnqmMkIiIqVhJBUNlRGhVp2OLgwYPYuXMn2rdvj9GjR8PV1RXVqlWDo6Mjdu3ahSFDhqg6TiIiomLDYQvFitTz8OrVKzg5OQHInd/wbmlmmzZtcO7cOdVFR0RERFqnSMlDlSpV8PTpUwBAnTp1sHdv7p72Bw8ehKWlpapiIyIi0ggOWyimVPLw+PFjSCQSjBo1Cjdu5D622MvLSzr3Yfr06Zg1a5ZaAiUiIiouggr/K42UmvNQvXp1REZGYvr03OVuAwYMwOrVq3Hv3j0EBQWhatWqaNiwoVoCJSIiIu2gVM+D/KrOI0eOIDU1FQ4ODvjyyy+ZOBARUalQEoYtEhISMGzYMOkzooYNG4bXr18XWD8rKwuenp6oX78+TExMYG9vj+HDhyMiIqLAcwrCBf1ERERySsKwxeDBgxESEoJjx47h2LFjCAkJwbBhwwqsn5aWhmvXruHbb7/FtWvXsH//fjx48AA9evRQ+rOVGrYQiUQQyT1uUv41ERERqVdoaCiOHTuGS5cuoUWL3A2tNm3aBBcXF9y/fx81a9bMc46FhQUCAgJkytasWYPmzZsjPDwcDg4Ohf58pZIHQRAwcuRI6UOt3rx5g/Hjx8PExESm3v793FKWiIhKLkGQqKytjIwMZGTIPqclvwdEKuPixYuwsLCQJg4A0LJlS1hYWODChQv5Jg/5SUxMhEgkUnqlpFLDFiNGjIC1tbV0fGXo0KGwt7eXvn53EBERlWQSCCo7fHx88vw76ePj81HxRUVFwdo670PNrK2tERUVVag23rx5gzlz5mDw4MFKP5NKqZ6Hbdu2KdU4ERFRSVSExz4VyMvLCx4eHjJlBfU6LFiwAAsXLlTY3tWruQ9hzG/agCAIhZpOkJWVhYEDB0IikWD9+vUfrC/vo5+qSURERAVTZojim2++wcCBAxXWqVy5Mm7evIno6Og878XGxsLGxkbh+VlZWejfvz+ePHmCU6dOFelJ2EweiIiI5Eg0tLmTlZUVrKysPljPxcUFiYmJuHLlCpo3bw4AuHz5MhITE9GqVasCz3uXODx8+BCnT59GuXLlihQnl2oSERHJEQRBZYc61K5dG127dsVXX32FS5cu4dKlS/jqq6/w+eefy0yWrFWrFv766y8AQHZ2Nvr27YugoCDs2rULOTk5iIqKQlRUFDIzM5X6fCYPREREJdCuXbtQv359uLm5wc3NDQ0aNMCvv/4qU+f+/ftITEwEALx48QL+/v548eIFGjVqBDs7O+lx4cIFpT6bwxZERERySsIDrcqWLYvffvtNYZ3/9nxUrlxZZT0hTB6IiIjklNYHWqkKhy2IiIhIKex5ICIikqOuiY6lBZMHIiIiOZpaqllScNiCiIiIlMKeByIiIjkctlCMyQMREZGckrBUU5OYPBAREclhz4NinPNARERESmHPAxERkRyutlCMyQMREZEcDlsoxmELIiIiUgp7HoiIiORwtYViTB6IiIjk8MFYinHYgoiIiJTCngciIiI5HLZQjMkDERGRHK62UIzDFkRERKQU9jwQERHJ4YRJxZg8EBERyeGwhWJMHoiIiOQweVCMcx6IiIhIKex5ICIiksN+B8VEAvtmVCIjIwM+Pj7w8vKCWCzWdDifPN4P7cF7oT14L0hVmDyoSFJSEiwsLJCYmAhzc3NNh/PJ4/3QHrwX2oP3glSFcx6IiIhIKUweiIiISClMHoiIiEgpTB5URCwWw9vbm5OQtATvh/bgvdAevBekKpwwSUREREphzwMREREphckDERERKYXJAxERESmFyQMREREphckDlTgikQgHDhwAADx9+hQikQghISEajYlUg/eTqGRg8lAIFy5cgK6uLrp27arpUD4JMTExGDduHBwcHCAWi2Fra4suXbrg4sWLAIDIyEi4u7sr1ea+ffvQokULWFhYwMzMDHXr1sWMGTPUEX6pMnLkSIhEIohEIujr66NKlSqYOXMmUlNTNR0aQfb+/PcICwvTdGhUyvGpmoWwdetWTJ48GZs3b0Z4eDgcHBw0HVKp1qdPH2RlZWHHjh2oUqUKoqOjcfLkSbx69QoAYGtrq1R7//zzDwYOHIgffvgBPXr0gEgkwt27d3Hy5El1hF/qdO3aFdu2bUNWVhYCAwMxduxYpKamwtfXV6l2BEFATk4O9PT4Y0eV3t2f/ypfvrxSbeTk5EAkEkFHh79PUiEJpFBKSopgZmYm3Lt3TxgwYICwcOFCmff//vtvoVq1aoKhoaHQvn17Yfv27QIAISEhQVrn/Pnzgqurq2BoaChUrFhRmDx5spCSklLMV1IyJCQkCACEM2fOFFgHgPDXX38JgiAIT548EQAIe/bsEVxcXASxWCzUqVNHOH36tLT+1KlThfbt2yv8XG9vb6Fhw4bChg0bhIoVKwpGRkZC3759Ze7jp2jEiBFCz549ZcrGjh0r2NraCr/++qvg7OwsmJqaCjY2NsKgQYOE6Ohoab3Tp08LAIRjx44Jzs7Ogr6+vnDq1CkhJydHWLp0qVC1alXBwMBAqFSpkrB48WJBEN7fz3379gnt27cXjIyMhAYNGggXLlwozssuMfK7P4IgCCtWrBDq1asnGBsbCxUrVhQmTJggJCcnS9/ftm2bYGFhIRw8eFCoXbu2oKurKzx+/FjIyMgQZs2aJdjb2wvGxsZC8+bNZf4uEb3DNPMD/Pz8ULNmTdSsWRNDhw7Ftm3bILzdV+vp06fo27cvevXqhZCQEIwbNw7z5s2TOf/WrVvo0qULvvzyS9y8eRN+fn74999/8c0332jicrSeqakpTE1NceDAAWRkZBT6vFmzZmHGjBm4fv06WrVqhR49eiA+Ph5Abk/FnTt3cPv2bYVthIWFYe/evTh48CCOHTuGkJAQTJo06aOupzQyMjJCVlYWMjMz8f333+PGjRs4cOAAnjx5gpEjR+apP3v2bPj4+CA0NBQNGjSAl5cXfvzxR3z77be4e/cudu/eDRsbG5lz5s2bh5kzZyIkJAQ1atTAoEGDkJ2dXUxXWPLp6Ohg9erVuH37Nnbs2IFTp05h9uzZMnXS0tLg4+ODzZs3486dO7C2tsaoUaNw/vx5/P7777h58yb69euHrl274uHDhxq6EtJams5etF2rVq2ElStXCoIgCFlZWYKVlZUQEBAgCIIgeHp6CvXq1ZOpP2/ePJmeh2HDhglff/21TJ3AwEBBR0dHSE9PV/8FlEB//vmnUKZMGcHQ0FBo1aqV4OXlJdy4cUP6PvLpeVi6dKn0/aysLKFixYrCjz/+KAhCbu9Rt27dBACCo6OjMGDAAGHLli3CmzdvpOd4e3sLurq6wvPnz6VlR48eFXR0dITIyEg1X7H2kv/N9vLly0K5cuWE/v3756l75coVAYD0N9x3PQ8HDhyQ1klKShLEYrGwadOmfD/v3f3cvHmztOzOnTsCACE0NFRFV1V6jBgxQtDV1RVMTEykR9++ffPU27t3r1CuXDnp623btgkAhJCQEGlZWFiYIBKJhJcvX8qc27FjR8HLy0t9F0ElEnseFLh//z6uXLmCgQMHAgD09PQwYMAAbN26Vfp+s2bNZM5p3ry5zOvg4GBs375d+hu1qakpunTpAolEgidPnhTPhZQwffr0QUREBPz9/dGlSxecOXMGTZo0wfbt2ws8x8XFRfr/enp6aNq0KUJDQwEAJiYmOHz4MMLCwjB//nyYmppixowZaN68OdLS0qTnOTg4oGLFijJtSiQS3L9/X/UXWYIcOnQIpqamMDQ0hIuLC9q2bYs1a9bg+vXr6NmzJxwdHWFmZob27dsDAMLDw2XOb9q0qfT/Q0NDkZGRgY4dOyr8zAYNGkj/387ODkDuRFrKq0OHDggJCZEeq1evxunTp9G5c2dUqFABZmZmGD58OOLj42UmuhoYGMh8z9euXYMgCKhRo4bMz6uzZ8/i0aNHmrg00mKcuaTAli1bkJ2djQoVKkjLBEGAvr4+EhISIAgCRCKRzDmC3KNCJBIJxo0bhylTpuRpnxMvC2ZoaIjOnTujc+fO+O677zB27Fh4e3vn2y1eEPl7U7VqVVStWhVjx47FvHnzUKNGDfj5+WHUqFEKz5dv51PToUMH+Pr6Ql9fH/b29tDX10dqairc3Nzg5uaG3377DeXLl0d4eDi6dOmCzMxMmfNNTEyk/29kZFSoz9TX15f+/7vvXyKRqOBqSh8TExNUq1ZN+vrZs2fo1q0bxo8fj++//x5ly5bFv//+izFjxiArK0taz8jISObPtkQiga6uLoKDg6GrqyvzGaampuq/ECpRmDwUIDs7Gzt37sSKFSvg5uYm816fPn2wa9cu1KpVC0eOHJF5LygoSOZ1kyZNcOfOHZm/3KS8OnXqSPd2yM+lS5fQtm1bALn3Ljg4WOG8ksqVK8PY2FjmN7Hw8HBERETA3t4eAHDx4kXo6OigRo0aqrmIEkr+HycAuHfvHuLi4rB06VJUqlQJQN4/+/mpXr06jIyMcPLkSYwdO1Yt8X7qgoKCkJ2djRUrVkhXT+zdu/eD5zVu3Bg5OTmIiYmBq6urusOkEo7JQwEOHTqEhIQEjBkzBhYWFjLv9e3bF1u2bMH+/fvx888/w9PTE2PGjEFISIi0a/1dRu/p6YmWLVti0qRJ+Oqrr2BiYoLQ0FAEBARgzZo1xX1ZWi8+Ph79+vXD6NGj0aBBA5iZmSEoKAjLli1Dz549Czxv3bp1qF69OmrXro3//e9/SEhIwOjRowEACxYsQFpaGrp16wZHR0e8fv0aq1evRlZWFjp37ixtw9DQECNGjMBPP/2EpKQkTJkyBf3791d6aeinwMHBAQYGBlizZg3Gjx+P27dv4/vvv//geYaGhvD09MTs2bNhYGCA1q1bIzY2Fnfu3MGYMWOKIfLSr2rVqsjOzsaaNWvwxRdf4Pz589iwYcMHz6tRowaGDBmC4cOHY8WKFWjcuDHi4uJw6tQp1K9fH926dSuG6KnE0OyUC+31+eefC926dcv3veDgYAGAEBwcLF2qKRaLhfbt2wu+vr4CAJnJkFeuXBE6d+4smJqaCiYmJkKDBg2EJUuWFNellChv3rwR5syZIzRp0kSwsLAQjI2NhZo1awrz588X0tLSBEHIf8Lk7t27hRYtWggGBgZC7dq1hZMnT0rbPHXqlNCnTx+hUqVKgoGBgWBjYyN07dpVCAwMlNZ5t1Rz/fr1gr29vWBoaCh8+eWXwqtXr4r1+rVNQUsBBUEQdu/eLVSuXFkQi8WCi4uL4O/vLwAQrl+/LgjC+wmT8stdc3JyhMWLFwuOjo6Cvr6+4ODgIPzwww+CILy/n+/aEIT3y3e5ZDCvgu7Pzz//LNjZ2QlGRkZCly5dhJ07d8rci3dLNeVlZmYK3333nVC5cmVBX19fsLW1FXr37i3cvHlTvRdCJY5IEOQG6emjLFmyBBs2bMDz5881HQopYcGCBThw4AC3RSYiKgQOW3yk9evXo1mzZihXrhzOnz+P5cuXcw8HIiIq1Zg8fKSHDx9i8eLFePXqFRwcHDBjxgx4eXlpOiwiIiK14bAFERERKYWbRBEREZFSmDwQERGRUpg8EBERkVKYPBAREZFSmDwQERGRUpg8EBERkVKYPBAREZFSmDwQERGRUv4PVqXZ9s8DwWgAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_num.corr()\n",
    "sns.heatmap(train_num.corr(), annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d58df4ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:39.127111Z",
     "iopub.status.busy": "2023-08-12T15:39:39.126659Z",
     "iopub.status.idle": "2023-08-12T15:39:39.153621Z",
     "shell.execute_reply": "2023-08-12T15:39:39.152589Z"
    },
    "papermill": {
     "duration": 0.052842,
     "end_time": "2023-08-12T15:39:39.156112",
     "exception": false,
     "start_time": "2023-08-12T15:39:39.103270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Parch</th>\n",
       "      <th>SibSp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30.626179</td>\n",
       "      <td>22.117887</td>\n",
       "      <td>0.329690</td>\n",
       "      <td>0.553734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>28.343690</td>\n",
       "      <td>48.395408</td>\n",
       "      <td>0.464912</td>\n",
       "      <td>0.473684</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Age       Fare     Parch     SibSp\n",
       "Survived                                          \n",
       "0         30.626179  22.117887  0.329690  0.553734\n",
       "1         28.343690  48.395408  0.464912  0.473684"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compare survival rate across Age, SibSp, Parch, and Fare\n",
    "pd.pivot_table(train_df, index = 'Survived', values = ['Age', 'SibSp','Parch','Fare'])\n",
    "# It seems younger people may have had a better chance of surviving\n",
    "# It seems that people who paid more may have had a better chance of surviving"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "65e191fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:39.202112Z",
     "iopub.status.busy": "2023-08-12T15:39:39.200893Z",
     "iopub.status.idle": "2023-08-12T15:39:41.230998Z",
     "shell.execute_reply": "2023-08-12T15:39:41.229876Z"
    },
    "papermill": {
     "duration": 2.055462,
     "end_time": "2023-08-12T15:39:41.233422",
     "exception": false,
     "start_time": "2023-08-12T15:39:39.177960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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+5g2bZp69eqlefPmadiwYdq8ebN27typL774os7nBwAAbk1uDUAHDhxQ3759nfvx8fGSpFGjRslmsyk/P185OTnO4yUlJXrppZeUl5enxo0bq2PHjvroo480aNAgZ010dLTWr1+vWbNm6ZVXXtF9992nDRs2qHv37nU3MQAAcEtzawDq06ePDMOo8LjNZnPZf/nll/Xyyy9ft9/hw4dr+PDhNzs8AABwm6r37wABAABUFQEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYDgEIAACYjlsD0K5duzR06FAFBgbKYrFo06ZNldZ/+OGHGjBggO6++255e3srKipK27dvd6mx2WyyWCxltsuXL9fiTAAAQH3i1gB08eJFde3aVUuWLLmh+l27dmnAgAHatm2bDh48qL59+2ro0KHKyspyqfP29lZ+fr7L5uXlVRtTAAAA9ZCHOy8eGxur2NjYG65PTk522X/jjTe0efNmbd26VWFhYc52i8Uif3//mhomAAC4zdTrd4BKS0t1/vx5+fr6urRfuHBBwcHBatWqlYYMGVLmDhEAADC3eh2A3nrrLV28eFEjRoxwtrVv3142m01btmxRSkqKvLy81KNHD504caLCfhwOh+x2u8sGAABuX259BHYzUlJSNGfOHG3evFktW7Z0tkdGRioyMtK536NHDz300EN6++23tXjx4nL7SkpKUmJiYq2PGQAA3Brq5R2gDRs2aMyYMfrggw/Uv3//SmsbNGigbt26VXoHKCEhQcXFxc4tNze3pocMAABuIfXuDlBKSoqef/55paSkaPDgwdetNwxD2dnZ6ty5c4U1VqtVVqu1JocJAABuYW4NQBcuXNDJkyed+6dOnVJ2drZ8fX3VunVrJSQkKC8vT2vXrpX0S/h59tlntWjRIkVGRqqgoECS1LhxY/n4+EiSEhMTFRkZqbZt28put2vx4sXKzs7W0qVL636CAADgluTWR2AHDhxQWFiY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Dw/98MMPNz0oAACA2lSlAHTPPffoyJEjFR7/8ssvFRAQcNODAgAAqE1VCkCDBg3Sq6++qsuXL5c5dunSJc2ePVtDhgypscEBAADUhiq9BD1r1ix9+OGHeuCBBzR58mS1a9dOFotFx44d09KlS3X16lXNnDmztsYKAABQI6oUgPz8/LRnzx698MILSkhIcPkZioEDB2rZsmWVfuMyAADAraDKX4QYHBysbdu26ezZszp58qQMw1Dbtm3VrFmz2hgfAABAjavWN0FLUrNmzdStW7eaHAsAAECdqNJL0AAAALcDAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdAhAAADAdtwegZcuWKSQkRF5eXgoPD9fu3bsrrB09erQsFkuZrWPHjs4am81Wbs3ly5frYjoAAKAecGsA2rBhg6ZPn66ZM2cqKytLPXv2VGxsrHJycsqtX7RokfLz851bbm6ufH199dRTT7nUeXt7u9Tl5+fLy8urLqYEAADqAbcGoAULFmjMmDEaO3asOnTooOTkZAUFBWn58uXl1vv4+Mjf39+5HThwQGfPntVzzz3nUmexWFzq/P3962I6AACgnnBbACopKdHBgwcVExPj0h4TE6M9e/bcUB+rV69W//79FRwc7NJ+4cIFBQcHq1WrVhoyZIiysrJqbNwAAKD+83DXhYuKinT16lX5+fm5tPv5+amgoOC65+fn5+vjjz/WunXrXNrbt28vm82mzp07y263a9GiRerRo4cOHz6stm3bltuXw+GQw+Fw7tvt9mrMCAAA1BdufwnaYrG47BuGUaatPDabTXfddZcef/xxl/bIyEg988wz6tq1q3r27KkPPvhADzzwgN5+++0K+0pKSpKPj49zCwoKqtZcAABA/eC2ANSiRQs1bNiwzN2ewsLCMneFfs0wDL377ruKi4tTo0aNKq1t0KCBunXrphMnTlRYk5CQoOLiYueWm5t74xMBAAD1jtsCUKNGjRQeHq60tDSX9rS0NEVHR1d6bkZGhk6ePKkxY8Zc9zqGYSg7O1sBAQEV1litVnl7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r9KcbsSFCxckST9+e1xXHJdqvH+Yk73gl8fGBw8edP4dA27W8ePHJfHvFWretX+zLly4UKP/rb3Wl2EY1611WwC6xmKxuOwbhlGm7Xr1v26vap9JSUlKTEws0x4UFFTxwG/SwfffrLW+YV7jx4939xBwG+LfK9SW3r1710q/58+fl4+PT6U1bgtALVq0UMOGDcvcmSksLCxzB+caf3//cus9PDzUvHnzSmsq6lOSEhISFB8f79wvLS3Vjz/+qObNm1canNzJbrcrKChIubm58vb2dvdw6h3Wr/pYu5vD+lUfa3dzzLB+hmHo/PnzCgwMvG6t2wJQo0aNFB4errS0NP32t791tqelpWnYsGHlnhMVFaWtW7e6tO3YsUMRERHy9PR01qSlpenFF190qYmOjq5wLFarVVar1aXtrrvuquqU3MLb2/u2/YtcF1i/6mPtbg7rV32s3c253dfvend+rnHrI7D4+HjFxcUpIiJCUVFRWrlypXJycjRhwgRJv9yZycvL09q1ayVJEyZM0JIlSxQfH69x48YpMzNTq1evVkpKirPPadOmqVevXpo3b56GDRumzZs3a+fOnfriiy/cMkcAAHDrcWsAGjlypM6cOaO5c+cqPz9fnTp10rZt2xQcHCxJys/Pd/lOoJCQEG3btk0vvviili5dqsDAQC1evFhPPvmksyY6Olrr16/XrFmz9Morr+i+++7Thg0b1L179zqfHwAAuDW5/SXoiRMnauLEieUes9lsZdp69+6tQ4cOVdrn8OHDNXz48JoY3i3LarVq9uzZZR7d4cawftXH2t0c1q/6WLubw/q5shg38lkxAACA24jbfwsMAACgrhGAAACA6RCAAACA6RCAAACA6RCAbiG7du3S0KFDFRgYKIvFok2bNrkcNwxDc+bMUWBgoBo3bqw+ffroq6++cqlxOByaMmWKWrRooSZNmug3v/mN/u///q8OZ+EeSUlJ6tatm5o2baqWLVvq8ccfd/6O0TWsX8WWL1+uLl26OL8gLSoqSh9//LHzOGt345KSkmSxWDR9+nRnG+tXsTlz5shisbhs/v7+zuOsXeXy8vL0zDPPqHnz5rrjjjv04IMP6uDBg87jrF8lDNwytm3bZsycOdNITU01JBkbN250Of7mm28aTZs2NVJTU40jR44YI0eONAICAgy73e6smTBhgnHPPfcYaWlp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KO3evVt79+5V27ZtNWjQIJ0/f96ln9mzZ2vYsGE6cuSInn/+eZdjxcXFiomJUUlJiT799FP5+vpq1apVmjlzpl5//XUdO3ZMb7zxhl555RX99a9/lSRdvHhRQ4YMUbt27XTw4EHNmTNHL730Um0sG4CqcvevsQIwj1GjRhkNGzY0mjRp4rLNnTvXMAzDkGTMmjXLWZ+ZmWlIMlavXu1sS0lJMby8vJz7s2fPNho2bGjk5uY62z7++GOjQYMGRn5+frnjuHLlitG0aVNj69atzjZJxvTp013qPv/8c0OS8fXXXxtdu3Y1nnjiCcPhcDiPBwUFGevWrXM557XXXjOioqIMwzCMd955x/D19TUuXrzoPL58+XJDkpGVlXXd9QJQe3gHCECd6tu3r5YvX+7S5uvr6/xzly5dnH/28/OTJHXu3Nml7fLly7Lb7fL29pYktW7dWq1atXLWREVFqbS0VMePH5e/v78KCwv16quv6rPPPtP333+vq1ev6qefflJOTo7LOCIiIsodc//+/dWtWzd98MEHatiwoSTphx9+UG5ursaMGaNx48Y5a69cuSIfHx9J0rFjx9S1a1fdcccdLmMD4H4EIAB1qkmTJrr//vsrPO7p6en8s8ViqbCttLS0wj6u1Vz739GjR+uHH35QcnKygoODZbVaFRUVpZKSkjJjK8/gwYOVmpqqf/7zn84wdu36q1atUvfu3V3qr4UkwzAqHCMA9yIAAaj3cnJy9N133ykwMFCSlJmZqQYNGuiBBx6QJO3evVvLli3ToEGDJEm5ubkqKiq64f7ffPNN3XnnnerXr5/S09MVGhoqPz8/3XPPPfrmm2/0+9//vtzzQkND9d577+nSpUtq3LixJGnv3r03M1UANYQABKBOORwOFRQUuLR5eHioRYsW1e7Ty8tLo0aN0vz582W32zV16lSNGDFC/v7+kqT7779f7733niIiImS32/U///M/zkByo+bPn6+rV6/q0UcfVXp6utq3b685c+Zo6tSp8vb2VmxsrBwOhw4cOKCzZ88qPj5eTz/9tGbOnKkxY8Zo1qxZOn36tObPn1/teQKoOXwKDECd+uSTTxQQEOCyPfLIIzfV5/33368nnnhCgwYNUkxMjDp16uTycfR3331XZ8+eVVhYmOLi4jR16lS1bNmyytdZuHChRowYoUcffVT/+te/NHbsWP3lL3+RzWZT586d1bt3b9lsNoWEhEiS7rzzTm3dulX//Oc/FRYWppkzZ2revHk3NVcANcNi8JAaAACYDHeAAACA6RCAAACA6RCAAACA6RCAAACA6RCAAACA6RCAAACA6RCAAACA6RCAAACA6RCAAACA6RCAAACA6RCAAACA6RCAAACA6fx/Q28+FqVuWHEAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot categorical columns to observe distributions with histograms\n",
    "for i in train_cat.columns:\n",
    "    sns.histplot(data = train_cat[i].value_counts().index, x=train_cat[i].value_counts()).set_title(i)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3ce42d41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:41.282868Z",
     "iopub.status.busy": "2023-08-12T15:39:41.282475Z",
     "iopub.status.idle": "2023-08-12T15:39:41.321562Z",
     "shell.execute_reply": "2023-08-12T15:39:41.319974Z"
    },
    "papermill": {
     "duration": 0.067156,
     "end_time": "2023-08-12T15:39:41.324264",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.257108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pclass      1   2    3\n",
      "Survived              \n",
      "0          80  97  372\n",
      "1         136  87  119\n",
      "\n",
      "Sex       female  male\n",
      "Survived              \n",
      "0             81   468\n",
      "1            233   109\n",
      "\n",
      "Embarked   C   Q    S\n",
      "Survived             \n",
      "0         75  47  427\n",
      "1         93  30  217\n"
     ]
    }
   ],
   "source": [
    "# Comparing survival vs. each of the categorical variables\n",
    "print(pd.pivot_table(train_df, index='Survived', columns='Pclass', values='Ticket', aggfunc='count'))\n",
    "print()\n",
    "print(pd.pivot_table(train_df, index='Survived', columns='Sex', values='Ticket', aggfunc='count'))\n",
    "print()\n",
    "print(pd.pivot_table(train_df, index='Survived', columns='Embarked', values='Ticket', aggfunc='count'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7ad800d",
   "metadata": {
    "papermill": {
     "duration": 0.023474,
     "end_time": "2023-08-12T15:39:41.371806",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.348332",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature Engineering for Cabins\n",
    "##### Simplify cabins (from 0-4) to whether or not the purchase involved 1 or multiple cabins; How does this impact survival?\n",
    "##### Tickets - Do different ticket types impact survival rates?\n",
    "##### Does a person's title relate to survival rates?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "749c6b38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:41.421061Z",
     "iopub.status.busy": "2023-08-12T15:39:41.420638Z",
     "iopub.status.idle": "2023-08-12T15:39:41.432636Z",
     "shell.execute_reply": "2023-08-12T15:39:41.431883Z"
    },
    "papermill": {
     "duration": 0.039048,
     "end_time": "2023-08-12T15:39:41.434679",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.395631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    687\n",
       "1    180\n",
       "2     16\n",
       "3      6\n",
       "4      2\n",
       "Name: cabin_multiple, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use lambda function to split 'Cabin' on each space and return that split count as the number of cabins owned by that passenger -> 'cabin_multiple'\n",
    "train_cat.Cabin\n",
    "train_df['cabin_multiple'] = train_df.Cabin.apply(lambda x: 0 if pd.isna(x) else len(x.split(' ')))\n",
    "train_df['cabin_multiple'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4a9479b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:41.484647Z",
     "iopub.status.busy": "2023-08-12T15:39:41.483420Z",
     "iopub.status.idle": "2023-08-12T15:39:41.511377Z",
     "shell.execute_reply": "2023-08-12T15:39:41.510205Z"
    },
    "papermill": {
     "duration": 0.055333,
     "end_time": "2023-08-12T15:39:41.513733",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.458400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>train_test</th>\n",
       "      <th>cabin_multiple</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Mr. Charles Alexander</td>\n",
       "      <td>male</td>\n",
       "      <td>19.00</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.0000</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>76</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moen, Mr. Sigurd Hansen</td>\n",
       "      <td>male</td>\n",
       "      <td>25.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>348123</td>\n",
       "      <td>7.6500</td>\n",
       "      <td>F G73</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>89</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Miss. Mabel Helen</td>\n",
       "      <td>female</td>\n",
       "      <td>23.00</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.0000</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>98</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Greenfield, Mr. William Bertram</td>\n",
       "      <td>male</td>\n",
       "      <td>23.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17759</td>\n",
       "      <td>63.3583</td>\n",
       "      <td>D10 D12</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>119</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Baxter, Mr. Quigg Edmond</td>\n",
       "      <td>male</td>\n",
       "      <td>24.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17558</td>\n",
       "      <td>247.5208</td>\n",
       "      <td>B58 B60</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>129</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Peter, Miss. Anna</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2668</td>\n",
       "      <td>22.3583</td>\n",
       "      <td>F E69</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Allison, Miss. Helen Loraine</td>\n",
       "      <td>female</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Baxter, Mrs. James (Helene DeLaudeniere Chaput)</td>\n",
       "      <td>female</td>\n",
       "      <td>50.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17558</td>\n",
       "      <td>247.5208</td>\n",
       "      <td>B58 B60</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>305</th>\n",
       "      <td>306</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Allison, Master. Hudson Trevor</td>\n",
       "      <td>male</td>\n",
       "      <td>0.92</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>311</th>\n",
       "      <td>312</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Ryerson, Miss. Emily Borie</td>\n",
       "      <td>female</td>\n",
       "      <td>18.00</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PC 17608</td>\n",
       "      <td>262.3750</td>\n",
       "      <td>B57 B59 B63 B66</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>341</th>\n",
       "      <td>342</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Miss. Alice Elizabeth</td>\n",
       "      <td>female</td>\n",
       "      <td>24.00</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.0000</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>390</th>\n",
       "      <td>391</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Carter, Mr. William Ernest</td>\n",
       "      <td>male</td>\n",
       "      <td>36.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113760</td>\n",
       "      <td>120.0000</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>436</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Carter, Miss. Lucile Polk</td>\n",
       "      <td>female</td>\n",
       "      <td>14.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113760</td>\n",
       "      <td>120.0000</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>439</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Mr. Mark</td>\n",
       "      <td>male</td>\n",
       "      <td>64.00</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.0000</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>499</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Allison, Mrs. Hudson J C (Bessie Waldo Daniels)</td>\n",
       "      <td>female</td>\n",
       "      <td>25.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>680</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cardeza, Mr. Thomas Drake Martinez</td>\n",
       "      <td>male</td>\n",
       "      <td>36.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17755</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>699</th>\n",
       "      <td>700</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Humblen, Mr. Adolf Mathias Nicolai Olsen</td>\n",
       "      <td>male</td>\n",
       "      <td>42.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>348121</td>\n",
       "      <td>7.6500</td>\n",
       "      <td>F G63</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>700</th>\n",
       "      <td>701</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Astor, Mrs. John Jacob (Madeleine Talmadge Force)</td>\n",
       "      <td>female</td>\n",
       "      <td>18.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17757</td>\n",
       "      <td>227.5250</td>\n",
       "      <td>C62 C64</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>715</th>\n",
       "      <td>716</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Soholt, Mr. Peter Andreas Lauritz Andersen</td>\n",
       "      <td>male</td>\n",
       "      <td>19.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>348124</td>\n",
       "      <td>7.6500</td>\n",
       "      <td>F G73</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>742</th>\n",
       "      <td>743</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Ryerson, Miss. Susan Parker \"Suzette\"</td>\n",
       "      <td>female</td>\n",
       "      <td>21.00</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PC 17608</td>\n",
       "      <td>262.3750</td>\n",
       "      <td>B57 B59 B63 B66</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>763</th>\n",
       "      <td>764</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Carter, Mrs. William Ernest (Lucile Polk)</td>\n",
       "      <td>female</td>\n",
       "      <td>36.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113760</td>\n",
       "      <td>120.0000</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>789</th>\n",
       "      <td>790</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Guggenheim, Mr. Benjamin</td>\n",
       "      <td>male</td>\n",
       "      <td>46.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17593</td>\n",
       "      <td>79.2000</td>\n",
       "      <td>B82 B84</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>802</th>\n",
       "      <td>803</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Carter, Master. William Thornton II</td>\n",
       "      <td>male</td>\n",
       "      <td>11.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113760</td>\n",
       "      <td>120.0000</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>873</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Carlsson, Mr. Frans Olof</td>\n",
       "      <td>male</td>\n",
       "      <td>33.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>695</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "27            28         0       1   \n",
       "75            76         0       3   \n",
       "88            89         1       1   \n",
       "97            98         1       1   \n",
       "118          119         0       1   \n",
       "128          129         1       3   \n",
       "297          298         0       1   \n",
       "299          300         1       1   \n",
       "305          306         1       1   \n",
       "311          312         1       1   \n",
       "341          342         1       1   \n",
       "390          391         1       1   \n",
       "435          436         1       1   \n",
       "438          439         0       1   \n",
       "498          499         0       1   \n",
       "679          680         1       1   \n",
       "699          700         0       3   \n",
       "700          701         1       1   \n",
       "715          716         0       3   \n",
       "742          743         1       1   \n",
       "763          764         1       1   \n",
       "789          790         0       1   \n",
       "802          803         1       1   \n",
       "872          873         0       1   \n",
       "\n",
       "                                                  Name     Sex    Age  SibSp  \\\n",
       "27                      Fortune, Mr. Charles Alexander    male  19.00      3   \n",
       "75                             Moen, Mr. Sigurd Hansen    male  25.00      0   \n",
       "88                          Fortune, Miss. Mabel Helen  female  23.00      3   \n",
       "97                     Greenfield, Mr. William Bertram    male  23.00      0   \n",
       "118                           Baxter, Mr. Quigg Edmond    male  24.00      0   \n",
       "128                                  Peter, Miss. Anna  female    NaN      1   \n",
       "297                       Allison, Miss. Helen Loraine  female   2.00      1   \n",
       "299    Baxter, Mrs. James (Helene DeLaudeniere Chaput)  female  50.00      0   \n",
       "305                     Allison, Master. Hudson Trevor    male   0.92      1   \n",
       "311                         Ryerson, Miss. Emily Borie  female  18.00      2   \n",
       "341                     Fortune, Miss. Alice Elizabeth  female  24.00      3   \n",
       "390                         Carter, Mr. William Ernest    male  36.00      1   \n",
       "435                          Carter, Miss. Lucile Polk  female  14.00      1   \n",
       "438                                  Fortune, Mr. Mark    male  64.00      1   \n",
       "498    Allison, Mrs. Hudson J C (Bessie Waldo Daniels)  female  25.00      1   \n",
       "679                 Cardeza, Mr. Thomas Drake Martinez    male  36.00      0   \n",
       "699           Humblen, Mr. Adolf Mathias Nicolai Olsen    male  42.00      0   \n",
       "700  Astor, Mrs. John Jacob (Madeleine Talmadge Force)  female  18.00      1   \n",
       "715         Soholt, Mr. Peter Andreas Lauritz Andersen    male  19.00      0   \n",
       "742              Ryerson, Miss. Susan Parker \"Suzette\"  female  21.00      2   \n",
       "763          Carter, Mrs. William Ernest (Lucile Polk)  female  36.00      1   \n",
       "789                           Guggenheim, Mr. Benjamin    male  46.00      0   \n",
       "802                Carter, Master. William Thornton II    male  11.00      1   \n",
       "872                           Carlsson, Mr. Frans Olof    male  33.00      0   \n",
       "\n",
       "     Parch    Ticket      Fare            Cabin Embarked  train_test  \\\n",
       "27       2     19950  263.0000      C23 C25 C27        S           1   \n",
       "75       0    348123    7.6500            F G73        S           1   \n",
       "88       2     19950  263.0000      C23 C25 C27        S           1   \n",
       "97       1  PC 17759   63.3583          D10 D12        C           1   \n",
       "118      1  PC 17558  247.5208          B58 B60        C           1   \n",
       "128      1      2668   22.3583            F E69        C           1   \n",
       "297      2    113781  151.5500          C22 C26        S           1   \n",
       "299      1  PC 17558  247.5208          B58 B60        C           1   \n",
       "305      2    113781  151.5500          C22 C26        S           1   \n",
       "311      2  PC 17608  262.3750  B57 B59 B63 B66        C           1   \n",
       "341      2     19950  263.0000      C23 C25 C27        S           1   \n",
       "390      2    113760  120.0000          B96 B98        S           1   \n",
       "435      2    113760  120.0000          B96 B98        S           1   \n",
       "438      4     19950  263.0000      C23 C25 C27        S           1   \n",
       "498      2    113781  151.5500          C22 C26        S           1   \n",
       "679      1  PC 17755  512.3292      B51 B53 B55        C           1   \n",
       "699      0    348121    7.6500            F G63        S           1   \n",
       "700      0  PC 17757  227.5250          C62 C64        C           1   \n",
       "715      0    348124    7.6500            F G73        S           1   \n",
       "742      2  PC 17608  262.3750  B57 B59 B63 B66        C           1   \n",
       "763      2    113760  120.0000          B96 B98        S           1   \n",
       "789      0  PC 17593   79.2000          B82 B84        C           1   \n",
       "802      2    113760  120.0000          B96 B98        S           1   \n",
       "872      0       695    5.0000      B51 B53 B55        S           1   \n",
       "\n",
       "     cabin_multiple  \n",
       "27                3  \n",
       "75                2  \n",
       "88                3  \n",
       "97                2  \n",
       "118               2  \n",
       "128               2  \n",
       "297               2  \n",
       "299               2  \n",
       "305               2  \n",
       "311               4  \n",
       "341               3  \n",
       "390               2  \n",
       "435               2  \n",
       "438               3  \n",
       "498               2  \n",
       "679               3  \n",
       "699               2  \n",
       "700               2  \n",
       "715               2  \n",
       "742               4  \n",
       "763               2  \n",
       "789               2  \n",
       "802               2  \n",
       "872               3  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.loc[train_df['cabin_multiple'] > 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6f020613",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:41.564984Z",
     "iopub.status.busy": "2023-08-12T15:39:41.564579Z",
     "iopub.status.idle": "2023-08-12T15:39:41.587928Z",
     "shell.execute_reply": "2023-08-12T15:39:41.586806Z"
    },
    "papermill": {
     "duration": 0.051478,
     "end_time": "2023-08-12T15:39:41.590131",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.538653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>cabin_multiple</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>481.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>206.0</td>\n",
       "      <td>122.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "cabin_multiple      0      1    2    3    4\n",
       "Survived                                   \n",
       "0               481.0   58.0  7.0  3.0  NaN\n",
       "1               206.0  122.0  9.0  3.0  2.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.pivot_table(train_df, index='Survived', columns='cabin_multiple', values='Ticket', aggfunc='count')\n",
    "# it seems that passengers who owned more cabins tend to have a better chance of surviving; likely related to wealth status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9a9b8f5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:41.642525Z",
     "iopub.status.busy": "2023-08-12T15:39:41.641883Z",
     "iopub.status.idle": "2023-08-12T15:39:41.648377Z",
     "shell.execute_reply": "2023-08-12T15:39:41.647624Z"
    },
    "papermill": {
     "duration": 0.035548,
     "end_time": "2023-08-12T15:39:41.650560",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.615012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create categories based on cabin letter\n",
    "# Treat null values as own category\n",
    "train_df['cabin_adv'] = train_df.Cabin.apply(lambda x: str(x)[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0794cc30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:41.702586Z",
     "iopub.status.busy": "2023-08-12T15:39:41.701932Z",
     "iopub.status.idle": "2023-08-12T15:39:41.729632Z",
     "shell.execute_reply": "2023-08-12T15:39:41.728504Z"
    },
    "papermill": {
     "duration": 0.056635,
     "end_time": "2023-08-12T15:39:41.732022",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.675387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n    687\n",
      "C     59\n",
      "B     47\n",
      "D     33\n",
      "E     32\n",
      "A     15\n",
      "F     13\n",
      "G      4\n",
      "T      1\n",
      "Name: cabin_adv, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>cabin_adv</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>G</th>\n",
       "      <th>T</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>481.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>206.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "cabin_adv    A     B     C     D     E    F    G    T      n\n",
       "Survived                                                    \n",
       "0          8.0  12.0  24.0   8.0   8.0  5.0  2.0  1.0  481.0\n",
       "1          7.0  35.0  35.0  25.0  24.0  8.0  2.0  NaN  206.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(train_df.cabin_adv.value_counts())\n",
    "pd.pivot_table(train_df, index='Survived', columns='cabin_adv', values='Ticket', aggfunc='count')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8145f162",
   "metadata": {
    "papermill": {
     "duration": 0.024854,
     "end_time": "2023-08-12T15:39:41.782262",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.757408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Feature engineering on passenger's title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8f71ca42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:41.834896Z",
     "iopub.status.busy": "2023-08-12T15:39:41.834220Z",
     "iopub.status.idle": "2023-08-12T15:39:41.846672Z",
     "shell.execute_reply": "2023-08-12T15:39:41.845520Z"
    },
    "papermill": {
     "duration": 0.041239,
     "end_time": "2023-08-12T15:39:41.848863",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.807624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr              517\n",
       "Miss            182\n",
       "Mrs             125\n",
       "Master           40\n",
       "Dr                7\n",
       "Rev               6\n",
       "Mlle              2\n",
       "Major             2\n",
       "Col               2\n",
       "the Countess      1\n",
       "Capt              1\n",
       "Ms                1\n",
       "Sir               1\n",
       "Lady              1\n",
       "Mme               1\n",
       "Don               1\n",
       "Jonkheer          1\n",
       "Name: name_title, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.Name.head(50)\n",
    "# all titles come after a comma, so we'll split on the comma then the period right after and strip to return the title\n",
    "train_df['name_title'] = train_df.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())\n",
    "\n",
    "train_df.name_title.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6354d17f",
   "metadata": {
    "papermill": {
     "duration": 0.024883,
     "end_time": "2023-08-12T15:39:41.898982",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.874099",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Data Preprocessing for Model\n",
    "##### 1.) Drop null values from Embarked\n",
    "##### 2.) Include only RELEVANT variables (Pclass, Sex, Age, SibSp, Parch, Fare, Embarked, cabin_adv, cabin_multiple, numeric_ticket, name_title)\n",
    "##### 3.) Categorical transforms on all data. Use onehotencoder\n",
    "##### 4.) Impute data with mean for 'fare' and 'age'\n",
    "##### 5.) Normalized fare using algorithm to resemble a more normal distribution\n",
    "##### 6.) Scaled data 0-1 with standard scaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8f11b27c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:41.952137Z",
     "iopub.status.busy": "2023-08-12T15:39:41.951516Z",
     "iopub.status.idle": "2023-08-12T15:39:42.293469Z",
     "shell.execute_reply": "2023-08-12T15:39:42.292228Z"
    },
    "papermill": {
     "duration": 0.371911,
     "end_time": "2023-08-12T15:39:42.296142",
     "exception": false,
     "start_time": "2023-08-12T15:39:41.924231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(889,)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create all categorical variables for all_data as done above for train_df and test_df\n",
    "all_data['cabin_multiple'] = all_data.Cabin.apply(lambda x: 0 if pd.isna(x) else len(x.split(' ')))\n",
    "all_data['cabin_adv'] = all_data.Cabin.apply(lambda x: str(x)[0])\n",
    "all_data['name_title'] = all_data.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())\n",
    "\n",
    "# Impute null values for continuous data\n",
    "all_data.Age = all_data.Age.fillna(train_df.Age.mean())\n",
    "all_data.Fare = all_data.Fare.fillna(train_df.Fare.median()) # better to use median (vs. mean) to fill NaN since age was not normally distributed\n",
    "# Drop null values in 'Embarked'. Only 2 null values in training in none in test\n",
    "all_data.dropna(subset=['Embarked'], inplace=True)\n",
    "\n",
    "# Log norm of fare\n",
    "all_data['norm_fare'] = np.log(all_data.Fare+1)\n",
    "all_data['norm_fare'].hist()\n",
    "\n",
    "# Convert 'fare' to a string so we can apply pd.get_dummies() function\n",
    "all_data.Pclass = all_data.Pclass.astype(str)\n",
    "\n",
    "# Create dummy variables from categories\n",
    "all_dummies = pd.get_dummies(all_data[['Pclass','Sex','Age','SibSp','Parch','norm_fare','Embarked',\n",
    "                                             'cabin_adv','cabin_multiple','name_title','train_test']])\n",
    "\n",
    "# Split all_data into train and test data (again)\n",
    "X_train = all_dummies[all_dummies.train_test == 1].drop(['train_test'], axis=1)\n",
    "X_test = all_dummies[all_dummies.train_test == 0].drop(['train_test'], axis=1)\n",
    "\n",
    "y_train = all_data[all_data.train_test==1].Survived\n",
    "y_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "678dc123",
   "metadata": {
    "papermill": {
     "duration": 0.025825,
     "end_time": "2023-08-12T15:39:42.348782",
     "exception": false,
     "start_time": "2023-08-12T15:39:42.322957",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Experiment with different models then evaluate performance on training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f7584a80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:42.403931Z",
     "iopub.status.busy": "2023-08-12T15:39:42.403202Z",
     "iopub.status.idle": "2023-08-12T15:39:43.264048Z",
     "shell.execute_reply": "2023-08-12T15:39:43.262756Z"
    },
    "papermill": {
     "duration": 0.891055,
     "end_time": "2023-08-12T15:39:43.266722",
     "exception": false,
     "start_time": "2023-08-12T15:39:42.375667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.naive_bayes import GaussianNB # typicaly baseline, very simple model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import tree\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.ensemble import VotingClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e6aa285",
   "metadata": {
    "papermill": {
     "duration": 0.025771,
     "end_time": "2023-08-12T15:39:43.318514",
     "exception": false,
     "start_time": "2023-08-12T15:39:43.292743",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Naive Bayes as baseline (72.5%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ef785fae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:43.372428Z",
     "iopub.status.busy": "2023-08-12T15:39:43.372007Z",
     "iopub.status.idle": "2023-08-12T15:39:43.421130Z",
     "shell.execute_reply": "2023-08-12T15:39:43.419911Z"
    },
    "papermill": {
     "duration": 0.078931,
     "end_time": "2023-08-12T15:39:43.423791",
     "exception": false,
     "start_time": "2023-08-12T15:39:43.344860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.66853933 0.70224719 0.76966292 0.75842697 0.72881356]\n",
      "0.7255379927632831\n"
     ]
    }
   ],
   "source": [
    "gnb = GaussianNB()\n",
    "cv = cross_val_score(gnb, X_train, y_train, cv=5)\n",
    "print(cv)\n",
    "print(cv.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cc4799a",
   "metadata": {
    "papermill": {
     "duration": 0.026528,
     "end_time": "2023-08-12T15:39:43.476562",
     "exception": false,
     "start_time": "2023-08-12T15:39:43.450034",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Logistic Regression (82.1%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "dfe3ad40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:43.531273Z",
     "iopub.status.busy": "2023-08-12T15:39:43.530711Z",
     "iopub.status.idle": "2023-08-12T15:39:44.719500Z",
     "shell.execute_reply": "2023-08-12T15:39:44.717974Z"
    },
    "papermill": {
     "duration": 1.236269,
     "end_time": "2023-08-12T15:39:44.739281",
     "exception": false,
     "start_time": "2023-08-12T15:39:43.503012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.82022472 0.81460674 0.80337079 0.82022472 0.84745763]\n",
      "0.8211769186821558\n"
     ]
    }
   ],
   "source": [
    "lr = LogisticRegression(max_iter = 2000)\n",
    "cv = cross_val_score(lr, X_train, y_train, cv=5)\n",
    "print(cv)\n",
    "print(cv.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78c365e4",
   "metadata": {
    "papermill": {
     "duration": 0.026079,
     "end_time": "2023-08-12T15:39:44.858906",
     "exception": false,
     "start_time": "2023-08-12T15:39:44.832827",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Decision Tree (78.6%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3a510461",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:44.919534Z",
     "iopub.status.busy": "2023-08-12T15:39:44.919001Z",
     "iopub.status.idle": "2023-08-12T15:39:44.978916Z",
     "shell.execute_reply": "2023-08-12T15:39:44.977620Z"
    },
    "papermill": {
     "duration": 0.095704,
     "end_time": "2023-08-12T15:39:44.981361",
     "exception": false,
     "start_time": "2023-08-12T15:39:44.885657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.76404494 0.76966292 0.8258427  0.76404494 0.8079096 ]\n",
      "0.7863010220275504\n"
     ]
    }
   ],
   "source": [
    "dt = tree.DecisionTreeClassifier(random_state=1)\n",
    "cv = cross_val_score(dt, X_train, y_train, cv=5)\n",
    "print(cv)\n",
    "print(cv.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd941663",
   "metadata": {
    "papermill": {
     "duration": 0.026079,
     "end_time": "2023-08-12T15:39:45.034094",
     "exception": false,
     "start_time": "2023-08-12T15:39:45.008015",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### K Nearest Neighbors (81.3%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "90ec164a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:45.088975Z",
     "iopub.status.busy": "2023-08-12T15:39:45.088338Z",
     "iopub.status.idle": "2023-08-12T15:39:45.535477Z",
     "shell.execute_reply": "2023-08-12T15:39:45.534543Z"
    },
    "papermill": {
     "duration": 0.477506,
     "end_time": "2023-08-12T15:39:45.537890",
     "exception": false,
     "start_time": "2023-08-12T15:39:45.060384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.7752809  0.82022472 0.80898876 0.81460674 0.84745763]\n",
      "0.8133117501428299\n"
     ]
    }
   ],
   "source": [
    "knn = KNeighborsClassifier()\n",
    "cv = cross_val_score(knn, X_train, y_train, cv=5)\n",
    "print(cv)\n",
    "print(cv.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e89ab44",
   "metadata": {
    "papermill": {
     "duration": 0.026389,
     "end_time": "2023-08-12T15:39:45.592130",
     "exception": false,
     "start_time": "2023-08-12T15:39:45.565741",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Random Forest (80.4%))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e345db57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:45.647902Z",
     "iopub.status.busy": "2023-08-12T15:39:45.647110Z",
     "iopub.status.idle": "2023-08-12T15:39:47.149875Z",
     "shell.execute_reply": "2023-08-12T15:39:47.148549Z"
    },
    "papermill": {
     "duration": 1.532815,
     "end_time": "2023-08-12T15:39:47.152434",
     "exception": false,
     "start_time": "2023-08-12T15:39:45.619619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.80337079 0.78651685 0.83146067 0.74719101 0.85310734]\n",
      "0.804329334095093\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier(random_state=1)\n",
    "cv = cross_val_score(rf, X_train, y_train, cv=5)\n",
    "print(cv)\n",
    "print(cv.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d311072",
   "metadata": {
    "papermill": {
     "duration": 0.029462,
     "end_time": "2023-08-12T15:39:47.209162",
     "exception": false,
     "start_time": "2023-08-12T15:39:47.179700",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Support Vector Machine (72.5%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "964d29f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:47.264204Z",
     "iopub.status.busy": "2023-08-12T15:39:47.263480Z",
     "iopub.status.idle": "2023-08-12T15:39:48.030714Z",
     "shell.execute_reply": "2023-08-12T15:39:48.029509Z"
    },
    "papermill": {
     "duration": 0.797674,
     "end_time": "2023-08-12T15:39:48.033257",
     "exception": false,
     "start_time": "2023-08-12T15:39:47.235583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.68539326 0.76966292 0.71348315 0.71910112 0.74011299]\n",
      "0.7255506887576969\n"
     ]
    }
   ],
   "source": [
    "svc = SVC(probability=True)\n",
    "cv = cross_val_score(svc, X_train, y_train, cv=5)\n",
    "print(cv)\n",
    "print(cv.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60531ef8",
   "metadata": {
    "papermill": {
     "duration": 0.026032,
     "end_time": "2023-08-12T15:39:48.085738",
     "exception": false,
     "start_time": "2023-08-12T15:39:48.059706",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### XG Boost (82.6%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "79668d18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:48.140160Z",
     "iopub.status.busy": "2023-08-12T15:39:48.139631Z",
     "iopub.status.idle": "2023-08-12T15:39:48.960773Z",
     "shell.execute_reply": "2023-08-12T15:39:48.959827Z"
    },
    "papermill": {
     "duration": 0.851348,
     "end_time": "2023-08-12T15:39:48.963415",
     "exception": false,
     "start_time": "2023-08-12T15:39:48.112067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.83146067 0.80898876 0.85393258 0.79775281 0.84180791]\n",
      "0.8267885482130387\n"
     ]
    }
   ],
   "source": [
    "xgb = XGBClassifier(random_state=1)\n",
    "cv = cross_val_score(xgb, X_train, y_train, cv=5)\n",
    "print(cv)\n",
    "print(cv.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e52ad7cb",
   "metadata": {
    "papermill": {
     "duration": 0.02655,
     "end_time": "2023-08-12T15:39:49.017638",
     "exception": false,
     "start_time": "2023-08-12T15:39:48.991088",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Voting Classifier (83.0%)\n",
    "##### This had the highest cross-validation score on testing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e2891aa8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:49.073488Z",
     "iopub.status.busy": "2023-08-12T15:39:49.072771Z",
     "iopub.status.idle": "2023-08-12T15:39:49.078315Z",
     "shell.execute_reply": "2023-08-12T15:39:49.077502Z"
    },
    "papermill": {
     "duration": 0.036198,
     "end_time": "2023-08-12T15:39:49.080683",
     "exception": false,
     "start_time": "2023-08-12T15:39:49.044485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Voting classifier takes all inputs and averages the results. For a \"hard\" classifier, each classifier gets 1 vote (Survived = 1 or 0) and result is the popular vote\n",
    "# A \"soft\" classifier averages the confidence of each of the models (all of the ones we ran) for whether or not that passenger survived\n",
    "# E.g. If two models are trained, and one is 20% confident in survival and the other is 80% confident, then the average is 50%\n",
    "# Since confidence >= 50% means Survived = 1, then the classifier will say that the passenger survived\n",
    "# In our case, all six models are take into consideration and averaged for whether Survived = 1 or 0\n",
    "voting_clf = VotingClassifier(estimators = [('lr',lr), ('knn',knn), ('rf',rf), ('gnb',gnb),\n",
    "                                           ('svc',svc), ('xgb',xgb)], voting = 'soft')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a039c8f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:49.136099Z",
     "iopub.status.busy": "2023-08-12T15:39:49.135380Z",
     "iopub.status.idle": "2023-08-12T15:39:53.532290Z",
     "shell.execute_reply": "2023-08-12T15:39:53.531457Z"
    },
    "papermill": {
     "duration": 4.427364,
     "end_time": "2023-08-12T15:39:53.534637",
     "exception": false,
     "start_time": "2023-08-12T15:39:49.107273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.8258427  0.82022472 0.80898876 0.8258427  0.8700565 ]\n",
      "0.8301910747159271\n"
     ]
    }
   ],
   "source": [
    "cv = cross_val_score(voting_clf, X_train, y_train, cv=5)\n",
    "print(cv)\n",
    "print(cv.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1488c24",
   "metadata": {
    "papermill": {
     "duration": 0.026208,
     "end_time": "2023-08-12T15:39:53.589338",
     "exception": false,
     "start_time": "2023-08-12T15:39:53.563130",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Tuning using GridSearchCV and RandomizedSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "543a83d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:53.644827Z",
     "iopub.status.busy": "2023-08-12T15:39:53.644197Z",
     "iopub.status.idle": "2023-08-12T15:39:53.649598Z",
     "shell.execute_reply": "2023-08-12T15:39:53.648524Z"
    },
    "papermill": {
     "duration": 0.035947,
     "end_time": "2023-08-12T15:39:53.651899",
     "exception": false,
     "start_time": "2023-08-12T15:39:53.615952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import RandomizedSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f2a51d06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:53.706623Z",
     "iopub.status.busy": "2023-08-12T15:39:53.706223Z",
     "iopub.status.idle": "2023-08-12T15:39:53.711726Z",
     "shell.execute_reply": "2023-08-12T15:39:53.710627Z"
    },
    "papermill": {
     "duration": 0.035585,
     "end_time": "2023-08-12T15:39:53.714116",
     "exception": false,
     "start_time": "2023-08-12T15:39:53.678531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create a function that writes a simple performance report\n",
    "def clf_performance(classifier, model_name):\n",
    "    print(model_name)\n",
    "    print('Best Score: ' + str(classifier.best_score_))\n",
    "    print('Best Parameters: ' + str(classifier.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bcdaab81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:53.787081Z",
     "iopub.status.busy": "2023-08-12T15:39:53.786708Z",
     "iopub.status.idle": "2023-08-12T15:39:57.028647Z",
     "shell.execute_reply": "2023-08-12T15:39:57.027221Z"
    },
    "papermill": {
     "duration": 3.272498,
     "end_time": "2023-08-12T15:39:57.031304",
     "exception": false,
     "start_time": "2023-08-12T15:39:53.758806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 40 candidates, totalling 200 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n",
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n",
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n",
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression\n",
      "Best Score: 0.8245667491906303\n",
      "Best Parameters: {'C': 4.281332398719396, 'max_iter': 2000, 'penalty': 'l1', 'solver': 'liblinear'}\n"
     ]
    }
   ],
   "source": [
    "# GridSearchCV allows us to create a parameter grid containing all of the parameters we want to tune then have it return optimized parameters \n",
    "#\n",
    "lr = LogisticRegression()\n",
    "param_grid = {'max_iter' : [2000],\n",
    "             'penalty' : ['l1', 'l2'],\n",
    "             'C' : np.logspace(-4,4,20),\n",
    "             'solver' : ['liblinear']}\n",
    "\n",
    "clf_lr = GridSearchCV(lr, param_grid = param_grid, cv=5, verbose=True, n_jobs=-1)\n",
    "best_clf_lr = clf_lr.fit(X_train, y_train)\n",
    "clf_performance(best_clf_lr, 'Logistic Regression')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2de9ab2d",
   "metadata": {
    "papermill": {
     "duration": 0.026574,
     "end_time": "2023-08-12T15:39:57.084889",
     "exception": false,
     "start_time": "2023-08-12T15:39:57.058315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Random Forest\n",
    "Best Score: 0.8357963562496031\n",
    "Best Parameters: {'n_estimators': 500, 'min_samples_split': 5, 'min_samples_leaf': 2, 'max_features': 'auto', 'max_depth': 100, 'bootstrap': True}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "bdcaaf38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:39:57.141225Z",
     "iopub.status.busy": "2023-08-12T15:39:57.140819Z",
     "iopub.status.idle": "2023-08-12T15:43:56.516015Z",
     "shell.execute_reply": "2023-08-12T15:43:56.514410Z"
    },
    "papermill": {
     "duration": 239.40685,
     "end_time": "2023-08-12T15:43:56.518726",
     "exception": false,
     "start_time": "2023-08-12T15:39:57.111876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 100 candidates, totalling 500 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
      "  warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest\n",
      "Best Score: 0.8346981527328128\n",
      "Best Parameters: {'n_estimators': 100, 'min_samples_split': 10, 'min_samples_leaf': 4, 'max_features': 'sqrt', 'max_depth': 20, 'bootstrap': False}\n"
     ]
    }
   ],
   "source": [
    "# Use RandomizedSearchCV for models that have a huuuuge number of tunable parameters (it would take forever to do a GridSearchCV)\n",
    "# RandomizedSearchCV doesn't try all option but randomly tunes parameters and gives you the best out of those\n",
    "# RandomForest has many many tunable parameters so we'll use RandomizedSearchCV\n",
    "rf = RandomForestClassifier(random_state=1)\n",
    "param_grid = {'n_estimators': [100,500,1000],\n",
    "             'bootstrap': [True, False],\n",
    "             'max_depth': [3,5,10,20,50,75,100,None],\n",
    "             'max_features': ['auto', 'sqrt'],\n",
    "             'min_samples_leaf': [1,2,4,10],\n",
    "             'min_samples_split': [2,5,10]}\n",
    "\n",
    "clf_rf_rnd = RandomizedSearchCV(rf, param_distributions=param_grid, n_iter=100,\n",
    "                               cv=5, verbose=True, n_jobs=-1)\n",
    "\n",
    "best_clf_rf_rnd = clf_rf_rnd.fit(X_train, y_train)\n",
    "clf_performance(best_clf_rf_rnd, 'Random Forest')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3769097",
   "metadata": {
    "papermill": {
     "duration": 0.041223,
     "end_time": "2023-08-12T15:43:56.601689",
     "exception": false,
     "start_time": "2023-08-12T15:43:56.560466",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Plot feature importances based on the optimized model fit on the training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "059d792d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:43:56.688560Z",
     "iopub.status.busy": "2023-08-12T15:43:56.688127Z",
     "iopub.status.idle": "2023-08-12T15:43:57.351770Z",
     "shell.execute_reply": "2023-08-12T15:43:57.350583Z"
    },
    "papermill": {
     "duration": 0.710698,
     "end_time": "2023-08-12T15:43:57.354321",
     "exception": false,
     "start_time": "2023-08-12T15:43:56.643623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "best_rf = best_clf_rf_rnd.best_estimator_.fit(X_train, y_train)\n",
    "feat_importances = pd.Series(best_rf.feature_importances_, index = X_train.columns)\n",
    "feat_importances.nlargest(20).plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7def8434",
   "metadata": {
    "papermill": {
     "duration": 0.042446,
     "end_time": "2023-08-12T15:43:57.439927",
     "exception": false,
     "start_time": "2023-08-12T15:43:57.397481",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Used VotingClassifier with best_rf and best_lr\n",
    "##### VCLF Hard: 83.1%\n",
    "##### VCLF Soft: 83.3% "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "90f33e17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:43:57.527465Z",
     "iopub.status.busy": "2023-08-12T15:43:57.527037Z",
     "iopub.status.idle": "2023-08-12T15:44:02.411674Z",
     "shell.execute_reply": "2023-08-12T15:44:02.410119Z"
    },
    "papermill": {
     "duration": 4.930861,
     "end_time": "2023-08-12T15:44:02.414155",
     "exception": false,
     "start_time": "2023-08-12T15:43:57.483294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "voting_clf_hard:  [0.81460674 0.81460674 0.84831461 0.80337079 0.88135593]\n",
      "voting_clf_hard_mean:  0.832450961721577\n",
      "voting_clf_soft:  [0.82022472 0.81460674 0.83146067 0.82022472 0.88135593]\n",
      "voting_clf_soft_mean:  0.8335745572271949\n"
     ]
    }
   ],
   "source": [
    "best_rf = best_clf_rf_rnd.best_estimator_\n",
    "best_lr = best_clf_lr.best_estimator_\n",
    "\n",
    "voting_clf_hard = VotingClassifier(estimators = [('rf',best_rf),('lr',best_lr)], voting='hard')\n",
    "voting_clf_soft = VotingClassifier(estimators = [('rf',best_rf),('lr',best_lr)], voting='soft')\n",
    "\n",
    "print('voting_clf_hard: ', cross_val_score(voting_clf_hard, X_train, y_train, cv=5))\n",
    "print('voting_clf_hard_mean: ', cross_val_score(voting_clf_hard, X_train, y_train, cv=5).mean())\n",
    "\n",
    "print('voting_clf_soft: ', cross_val_score(voting_clf_soft, X_train, y_train, cv=5))\n",
    "print('voting_clf_soft_mean: ', cross_val_score(voting_clf_soft, X_train, y_train, cv=5).mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3392195",
   "metadata": {
    "papermill": {
     "duration": 0.048255,
     "end_time": "2023-08-12T15:44:02.506351",
     "exception": false,
     "start_time": "2023-08-12T15:44:02.458096",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### A gridsearch of the VCLF soft (modified weights parameter) gave us cv=83.4%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "89c3e5ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:44:02.594459Z",
     "iopub.status.busy": "2023-08-12T15:44:02.593784Z",
     "iopub.status.idle": "2023-08-12T15:44:04.694354Z",
     "shell.execute_reply": "2023-08-12T15:44:04.692195Z"
    },
    "papermill": {
     "duration": 2.149869,
     "end_time": "2023-08-12T15:44:04.699491",
     "exception": false,
     "start_time": "2023-08-12T15:44:02.549622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 4 candidates, totalling 20 fits\n",
      "VC Weights\n",
      "Best Score: 0.8335745572271949\n",
      "Best Parameters: {'weights': [1, 1]}\n"
     ]
    }
   ],
   "source": [
    "# Use GridSearchCV to explore different weightings for soft VCLF\n",
    "params = {'weights' : [[1,1],[1,2],[2,1],[2,2]]}\n",
    "\n",
    "vote_weight = GridSearchCV(voting_clf_soft, param_grid=params, cv=5, verbose=True, n_jobs=-1)\n",
    "best_clf_weight = vote_weight.fit(X_train,y_train)\n",
    "clf_performance(best_clf_weight, 'VC Weights')\n",
    "voting_clb_sub = best_clf_weight.best_estimator_.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13d57cef",
   "metadata": {
    "papermill": {
     "duration": 0.045998,
     "end_time": "2023-08-12T15:44:04.838667",
     "exception": false,
     "start_time": "2023-08-12T15:44:04.792669",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Make Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "83413267",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:44:04.927757Z",
     "iopub.status.busy": "2023-08-12T15:44:04.926355Z",
     "iopub.status.idle": "2023-08-12T15:44:05.774173Z",
     "shell.execute_reply": "2023-08-12T15:44:05.772530Z"
    },
    "papermill": {
     "duration": 0.896673,
     "end_time": "2023-08-12T15:44:05.778404",
     "exception": false,
     "start_time": "2023-08-12T15:44:04.881731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "voting_clf_hard.fit(X_train,y_train)\n",
    "voting_clf_soft.fit(X_train,y_train)\n",
    "best_lr.fit(X_train,y_train)\n",
    "best_rf.fit(X_train,y_train)\n",
    "\n",
    "yhat_vc_hard = voting_clf_hard.predict(X_test)\n",
    "yhat_vc_soft = voting_clf_soft.predict(X_test)\n",
    "yhat_rf = best_rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "2f72fe23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:44:05.906164Z",
     "iopub.status.busy": "2023-08-12T15:44:05.905782Z",
     "iopub.status.idle": "2023-08-12T15:44:05.913359Z",
     "shell.execute_reply": "2023-08-12T15:44:05.912141Z"
    },
    "papermill": {
     "duration": 0.054981,
     "end_time": "2023-08-12T15:44:05.915799",
     "exception": false,
     "start_time": "2023-08-12T15:44:05.860818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# convert output to dataframe\n",
    "final_1 = {'PassengerId': test_df.PassengerId, 'Survived': yhat_rf}\n",
    "submission_rf = pd.DataFrame(data=final_1)\n",
    "submission_rf = submission_rf.astype(int)\n",
    "\n",
    "#final_2 = {'PassengerId': test_df.PassengerId, 'Survived': yhat_vc_hard}\n",
    "#submission_vc_hard = pd.DataFrame(data=final_2)\n",
    "\n",
    "#final_3 = {'PassengerId': test_df.PassengerId, 'Survived': yhat_vc_soft}\n",
    "#submission_vc_soft = pd.DataFrame(data=final_3)\n",
    "\n",
    "#final_data_comp = {'PassengerId': test_df.PassengerId, 'Survived_vc_hard':yhat_vc_hard,\n",
    "                  #'Survived_rf':yhat_rf,\n",
    "                  #'Survived_vc_soft':yhat_vc_soft}\n",
    "\n",
    "# comparison = pd.DataFrame(data=final_data_comp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c42d329a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:44:06.006090Z",
     "iopub.status.busy": "2023-08-12T15:44:06.005066Z",
     "iopub.status.idle": "2023-08-12T15:44:06.010041Z",
     "shell.execute_reply": "2023-08-12T15:44:06.009063Z"
    },
    "papermill": {
     "duration": 0.051514,
     "end_time": "2023-08-12T15:44:06.012259",
     "exception": false,
     "start_time": "2023-08-12T15:44:05.960745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#comparison['difference_rf_vc_hard'] = comparison.apply(lambda x: 1 if x.Survived_vc_hard != x.Survived_rf else 0, axis=1)\n",
    "#comparison['difference_soft_hard'] = comparison.apply(lambda x: 1 if x.Survived_vc_hard != x.Survived_vc_soft else 0, axis=1)\n",
    "#comparison['difference_rf_vc_soft'] = comparison.apply(lambda x: 1 if x.Survived_vc_soft != x.Survived_rf else 0, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5246b715",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:44:06.100494Z",
     "iopub.status.busy": "2023-08-12T15:44:06.099734Z",
     "iopub.status.idle": "2023-08-12T15:44:06.104377Z",
     "shell.execute_reply": "2023-08-12T15:44:06.103073Z"
    },
    "papermill": {
     "duration": 0.051449,
     "end_time": "2023-08-12T15:44:06.106743",
     "exception": false,
     "start_time": "2023-08-12T15:44:06.055294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#comparison.difference_soft_hard.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "140e7a20",
   "metadata": {
    "papermill": {
     "duration": 0.043358,
     "end_time": "2023-08-12T15:44:06.193583",
     "exception": false,
     "start_time": "2023-08-12T15:44:06.150225",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Prepare submission files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "737ef4f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:44:06.281374Z",
     "iopub.status.busy": "2023-08-12T15:44:06.280942Z",
     "iopub.status.idle": "2023-08-12T15:44:06.290038Z",
     "shell.execute_reply": "2023-08-12T15:44:06.289172Z"
    },
    "papermill": {
     "duration": 0.055787,
     "end_time": "2023-08-12T15:44:06.292219",
     "exception": false,
     "start_time": "2023-08-12T15:44:06.236432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_rf.to_csv('submission.csv', index=False)\n",
    "#submission_vc_hard.csv.to_csv('submission_vc_hard.csv', index=False)\n",
    "#submission_vc_soft.csv.to_csv('submission_vc_soft.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c5caa5d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-12T15:44:06.380661Z",
     "iopub.status.busy": "2023-08-12T15:44:06.379944Z",
     "iopub.status.idle": "2023-08-12T15:44:06.386597Z",
     "shell.execute_reply": "2023-08-12T15:44:06.385472Z"
    },
    "papermill": {
     "duration": 0.053441,
     "end_time": "2023-08-12T15:44:06.388805",
     "exception": false,
     "start_time": "2023-08-12T15:44:06.335364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(418, 2)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_rf.head()\n",
    "submission_rf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51043544",
   "metadata": {
    "papermill": {
     "duration": 0.043407,
     "end_time": "2023-08-12T15:44:06.475203",
     "exception": false,
     "start_time": "2023-08-12T15:44:06.431796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 285.31815,
   "end_time": "2023-08-12T15:44:09.140923",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-08-12T15:39:23.822773",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
